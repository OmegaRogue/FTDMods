// Decompiled with JetBrains decompiler
// Type: BrilliantSkies.FromTheDepths.Game.UserInterfaces.LuaEditor
// Assembly: sLuaFtd, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1F2B3D15-7BBB-434A-8CC1-CE845AB920C6
// Assembly location: /mnt/fastbulk/SteamLibrary/steamapps/common/From The Depths/From_The_Depths_Data/Managed/sLuaFtd.dll

#nullable enable
using System;
using System.Text.RegularExpressions;

using BrilliantSkies.Core;
using BrilliantSkies.Core.Help;
using BrilliantSkies.Core.Timing;
using BrilliantSkies.Core.UiSounds;
using BrilliantSkies.FromTheDepths.Game;
using BrilliantSkies.FromTheDepths.Game.UserInterfaces;
using BrilliantSkies.Localisation;
using BrilliantSkies.Localisation.Runtime.FileManagers.Files;
using BrilliantSkies.ScriptableObjects;
using BrilliantSkies.Ui.Displayer;
using BrilliantSkies.Ui.Displayer.Types;
using BrilliantSkies.Ui.Layouts;
using BrilliantSkies.Ui.Tips;

using NetInfrastructure;

using UnityEngine;

namespace LuaExtension
{
  public class BetterLuaEditor : SingletonObjectGui<BetterLuaBox>
  {
    public static ILocFile _locFile;
    private string[] _lineNumbers = new string[1500];
    private static BetterLuaEditor _instance = (BetterLuaEditor) null;
    private float charWidth;
    private SO_LuaEditor _s = (SO_LuaEditor) null;
    private LuaTabs _tab = LuaTabs.Edit;
    private Vector2 _editScroll;
    private Vector2 _errorScroll;
    private static Regex REG_I_VAR = new Regex("\\bI:\\b");
    private static Regex REG_KEYWORDS = new Regex("\\b(function|if|else|end)\\b");
    private BetterLuaEditor.LuaHelpTabs _helpTab = BetterLuaEditor.LuaHelpTabs.Basics;
    private Vector2 _scroll;
    private Vector2 _helpScroll;
    private string _text = "";

    public override bool StillHasAValidSubject() => this._focus.IsAlive;

    static BetterLuaEditor() => BetterLuaEditor._locFile = Loc.GetFile("Control_LUA_Editor");

    public static BetterLuaEditor Instance
    {
      get => BetterLuaEditor._instance ?? (BetterLuaEditor._instance = new BetterLuaEditor());
    }

    private BetterLuaEditor()
    {
      this._s = LazyLoader.LuaEditor.Get();
      this.RegisterWithEvents();
      for (int index = 0; index < 1500; ++index)
        this._lineNumbers[index] = (index + 1).ToString();
      this.charWidth = this._s.STYLE_EditAreaLineNumbers.CalcSize(new GUIContent("0")).x;
      this.charWidth -= (float) this._s.STYLE_EditAreaLineNumbers.padding.horizontal;
    }

    public override void OnGui()
    {
      this.Gui_DisplayTabs();
      switch (this._tab)
      {
        case LuaTabs.Edit:
          this.GuiEdit();
          break;
        case LuaTabs.Help:
          this.GuiHelp();
          break;
      }
    }

    public override void UpdateWhenActive(ITimeStep t)
    {
      if (!Input.GetKeyDown(KeyCode.F8))
        return;
      GUISoundManager.GetSingleton().PlayBeep();
      this._focus.SetText(this._text);
    }

    private void Gui_DisplayTabs()
    {
      BetterLuaEditor._locFile.Get("!!!NOTE_TO_TRANSLATORS!!!", "In Field strings with the syntax 'word: [word2] text' or '[word] text', do not translate word or word2, only text");
      GUILayout.BeginArea(this._s.R_TabsPanel, "", this._s.STYLE_TabsPanel);
      GUILayout.BeginHorizontal();
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Tab_Editor", "Editor"), this._tab == LuaTabs.Edit, (Action) (() => this._tab = LuaTabs.Edit), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Tab_Editor_Tip", "Edit your LUA code")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Tab_Help", "Help"), this._tab == LuaTabs.Help, (Action) (() => this._tab = LuaTabs.Help), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Tab_Help_Tip", "View help documentation")));
      if (GUILayout.Button(BetterLuaEditor._locFile.Get("Button_Exit", "Exit (doesn't save changes)"), (GUIStyle) "buttonred"))
        this.DeactivateGui(GuiDeactivateType.Standard);
      GUILayout.EndHorizontal();
      GUILayout.EndArea();
    }

    public override void SetGuiSettings()
    {
    }

    private void GuiEdit()
    {
      if (Event.current.keyCode == KeyCode.Tab || Event.current.character == '\t')
        Event.current.Use();
      if (Event.current.keyCode == KeyCode.F8 && Event.current.type == EventType.KeyDown)
      {
        GUISoundManager.GetSingleton().PlayBeep();
        this._text = this._focus.SetText(this._text);
      }
      string str = "(" + Rounding.R2(this._focus.ProcessingTime * 1000f).ToString() + "ms)";
      GUILayout.BeginArea(this._s.R_EditPanel, BetterLuaEditor._locFile.Format("Area_LUAEditor", "LUA Editor {0}", (object) (str + (NetSys.Status.Status != NetStatus.Disconnected ? BetterLuaEditor._locFile.Get("Area_LuaEditor_Desc", "(you'll need to press LOAD PREVIOUS to see changes that other players are making)") : "")), (object) this._s.STYLE_Panel));
      this._editScroll = GUILayout.BeginScrollView(this._editScroll);
      GUIContent guiContent = new GUIContent(this._text);
      int num1 = Strings.CountLines(this._text);
      int num2 = (int) Mathf.Log10((float) num1) + 1;
      GUILayout.BeginHorizontal();
      GUILayout.Label(string.Join("\n", this._lineNumbers, 0, Mathf.Min(1500, num1)), this._s.STYLE_EditAreaLineNumbers, GUILayout.Width(this.charWidth * (float) num2 + (float) this._s.STYLE_EditAreaLineNumbers.padding.horizontal));
      if (GUI.GetNameOfFocusedControl() != "LuaEdit")
      {
        GUI.SetNextControlName("LuaEdit");
        GUILayout.TextArea(this.FormatText(this._text), this._s.STYLE_EditArea);
      }
      else
      {
        GUI.SetNextControlName("LuaEdit");
        this._text = GUILayout.TextArea(this._text, this._s.STYLE_EditArea);
      }
      if (Event.current.isKey && (Event.current.control || Event.current.command) && Event.current.keyCode == KeyCode.A)
      {
        GUI.FocusControl("LuaEdit");
        ((TextEditor) GUIUtility.GetStateObject(typeof (TextEditor), GUIUtility.keyboardControl)).SelectAll();
      }
      GUILayout.EndHorizontal();
      GUILayout.EndScrollView();
      GUILayout.EndArea();
      this.GuiEditOptions();
      this.GuiErrorTrace();
    }

    private void GuiErrorTrace()
    {
      GUILayout.BeginArea(this._s.R_ErrorPanel, "Errors / Logs", this._s.STYLE_Panel);
      this._errorScroll = GUILayout.BeginScrollView(this._errorScroll);
      foreach (string logMessage in this._focus.binding.LogMessages)
        GUILayout.Label(logMessage, this._s.STYLE_LogMessage);
      GUILayout.TextArea(this._focus.ErrorStack, this._s.STYLE_ErrorArea);
      GUILayout.EndScrollView();
      GUILayout.EndArea();
    }

    private string FormatText(string text)
    {
      text = BetterLuaEditor.REG_I_VAR.Replace(text, "<color=cyan>I</color>:");
      return text;
    }

    private void GuiEditOptions()
    {
      GUILayout.BeginArea(this._s.R_EditButtons, BetterLuaEditor._locFile.Get("Area_Options", "Options"), this._s.STYLE_Panel);
      if (this._focus.Running)
      {
        if (GUILayout.Button(new GUIContent(BetterLuaEditor._locFile.Get("Button_StopRunning", "Stop running"), "stop"), this._s.STYLE_Button))
        {
          GUISoundManager.GetSingleton().PlayBeep();
          this._focus.Running = false;
        }
      }
      else if (GUILayout.Button(new GUIContent(BetterLuaEditor._locFile.Get("Button_RestartRunning", "Restart running"), "restart"), this._s.STYLE_Button))
      {
        GUISoundManager.GetSingleton().PlayBeep();
        this._focus.Running = true;
      }
      if (GUILayout.Button(new GUIContent(BetterLuaEditor._locFile.Get("Button_SaveF8", "Apply changes (SAVE) (F8)"), "apply"), this._s.STYLE_Button))
      {
        GUISoundManager.GetSingleton().PlayBeep();
        this._text = this._focus.SetText(this._text);
      }
      if (GUILayout.Button(new GUIContent(BetterLuaEditor._locFile.Get("Button_LoadPrevious", "Cancel changes (LOAD PREVIOUS)"), "cancel"), this._s.STYLE_Button))
      {
        GUISoundManager.GetSingleton().PlayBeep();
        this._text = this._focus.GetText();
      }
      if (GUILayout.Button(new GUIContent(BetterLuaEditor._locFile.Get("Button_ClearLog", "Clear Log"), "clear log"), this._s.STYLE_Button))
      {
        GUISoundManager.GetSingleton().PlayBeep();
        this._focus.binding.LogMessages.Clear();
      }
      if (GUILayout.Button(new GUIContent(BetterLuaEditor._locFile.Get("Button_SelectAllCtrla", "Select All (CTRL+A)"), "select all"), this._s.STYLE_Button))
      {
        GUISoundManager.GetSingleton().PlayBeep();
        GUI.FocusControl("LuaEdit");
        ((TextEditor) GUIUtility.GetStateObject(typeof (TextEditor), GUIUtility.keyboardControl)).SelectAll();
      }
      GUILayout.EndArea();
    }

    public override void EscapePressed()
    {
    }

    private void GuiHelp() => this.Gui_HelpTabs();

    private void Gui_HelpTabs()
    {
      GUILayout.BeginArea(this._s.R_HelpTabsPanel, "", this._s.STYLE_TabsPanel);
      this._scroll = GUILayout.BeginScrollView(this._scroll);
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Basics", "Basics"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Basics, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Basics), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Basics_Tip", "Learn the basics of setting up a piece of functional LUA code")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Syntax", "Syntax"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Syntax, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Syntax), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Syntax_Tip", "Learn basic LUA syntax")));
      GuiCommon.SubTabButton("Logging / Debugging", this._helpTab == BetterLuaEditor.LuaHelpTabs.Logging, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Logging), (IToolTip) new ToolTip("View the interface functions for logging and writing messages."));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Libraries", "Libraries"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Libraries, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Libraries), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Libraries_Tip", "View information on the available maths libraries.")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_FleetAwareness", "Fleet Awareness"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Fleet, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Fleet), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_FleetAwareness_Tip", "Learn how to detect fleet information")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Resources", "Resources"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Resources, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Resources), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Resources_Tip", "Learn how to detect resource information")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Ai", "AI"), this._helpTab == BetterLuaEditor.LuaHelpTabs.AI, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.AI), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Ai_Tip", "AI manipulation")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Propulsion", "Propulsion"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Propulsion, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Propulsion), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Propulsion_Tip", "View the propulsion request interface functions.")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_TargetInfo", "Target Info"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Targets, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Targets), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_TargetInfo_Tip", "View the target info request interface functions.")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Misc", "Misc"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Misc, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Misc), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Misc_Tip", "View misc functions")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Awareness", "Self awareness"), this._helpTab == BetterLuaEditor.LuaHelpTabs.SelfAwareness, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.SelfAwareness), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Awareness_Tip", "View functions for finding out about your own vehicle")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Components", "Components"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Components, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Components), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Components_Tip", "View functions for working with the components of the vehicle")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Weapons", "Weapons"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Weapons, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Weapons), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Weapons_Tip", "View functions for aiming and firing weapons.")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_MissileWarning", "Missile Warning"), this._helpTab == BetterLuaEditor.LuaHelpTabs.MissileWarning, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.MissileWarning), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_MissileWarning_Tip", "View functions for accessing your mainframe's missile warning database")));
      GuiCommon.SubTabButton("Missile Guidance", this._helpTab == BetterLuaEditor.LuaHelpTabs.MissileGuidance, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.MissileGuidance), (IToolTip) new ToolTip("View functions guiding missiles"));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_SpinBlocks", "Spin blocks and pistons"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Spinners, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Spinners), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_SpinBlocks_Tip", "View functions for controlling spin blocks and pistons")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Subconstructs", "SubConstructs"), this._helpTab == BetterLuaEditor.LuaHelpTabs.SubConstructs, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.SubConstructs), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Subconstructs_Tip", "View functions for controlling SubConstructs (turrets, pistons and spin blocks)")));
      GuiCommon.SubTabButton(BetterLuaEditor._locFile.Get("Button_Friendlies", "Friendlies"), this._helpTab == BetterLuaEditor.LuaHelpTabs.Friendlies, (Action) (() => this._helpTab = BetterLuaEditor.LuaHelpTabs.Friendlies), (IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Button_Friendlies_Tip", "View functions for probing friendly vehicle locations")));
      GUILayout.EndScrollView();
      GUILayout.EndArea();
      switch (this._helpTab)
      {
        case BetterLuaEditor.LuaHelpTabs.Basics:
          this.Help(new Action(this.GuiBasics), BetterLuaEditor._locFile.Get("Tab_Basics", "The Basics"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Syntax:
          this.Help(new Action(this.GuiSyntax), BetterLuaEditor._locFile.Get("Tab_LuaSyntax", "LUA Syntax"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Logging:
          this.Help(new Action(this.GuiLogging), "Logging and Messages");
          break;
        case BetterLuaEditor.LuaHelpTabs.Propulsion:
          this.Help(new Action(this.GuiPropulsion), BetterLuaEditor._locFile.Get("Tab_Propulsion", "Using Propulsion"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Targets:
          this.Help(new Action(this.GuiTargets), BetterLuaEditor._locFile.Get("Tab_AccessingTargetInfo", "Accessing Target Info"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Misc:
          this.Help(new Action(this.GuiMisc), BetterLuaEditor._locFile.Get("Tab_MiscFunctions", "Misc Functions"));
          break;
        case BetterLuaEditor.LuaHelpTabs.SelfAwareness:
          this.Help(new Action(this.GuiSelfAware), BetterLuaEditor._locFile.Get("Tab_Awareness", "Self awareness"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Components:
          this.Help(new Action(this.GuiComponents), BetterLuaEditor._locFile.Get("Tab_Components", "Components"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Weapons:
          this.Help(new Action(this.GuiWeapons), BetterLuaEditor._locFile.Get("Tab_Weapons", "Weapons"));
          break;
        case BetterLuaEditor.LuaHelpTabs.MissileWarning:
          this.Help(new Action(this.GuiMissileWarning), BetterLuaEditor._locFile.Get("Tab_MissileWarning", "Missile Warning"));
          break;
        case BetterLuaEditor.LuaHelpTabs.MissileGuidance:
          this.Help(new Action(this.GuiMissileGuidance), "Missile Guidance");
          break;
        case BetterLuaEditor.LuaHelpTabs.Maths:
          this.Help(new Action(this.GuiMaths), BetterLuaEditor._locFile.Get("Tab_Maths", "Maths"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Libraries:
          this.Help(new Action(this.Libraries), BetterLuaEditor._locFile.Get("Tab_Libraries", "Libraries"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Spinners:
          this.Help(new Action(this.Spinners), BetterLuaEditor._locFile.Get("Tab_Spinners", "Spinners"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Friendlies:
          this.Help(new Action(this.Friendlies), BetterLuaEditor._locFile.Get("Tab_Friendlies", "Friendlies"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Fleet:
          this.Help(new Action(this.Fleet), BetterLuaEditor._locFile.Get("Tab_Fleet", "Fleet"));
          break;
        case BetterLuaEditor.LuaHelpTabs.Resources:
          this.Help(new Action(this.ResourceZones), BetterLuaEditor._locFile.Get("Tab_Resources", "Resources"));
          break;
        case BetterLuaEditor.LuaHelpTabs.AI:
          this.Help(new Action(this.AI), BetterLuaEditor._locFile.Get("Tab_Ai", "AI"));
          break;
        case BetterLuaEditor.LuaHelpTabs.SubConstructs:
          this.Help(new Action(this.SubConstructs), BetterLuaEditor._locFile.Get("Tab_Subconstructs", "SubConstructs"));
          break;
      }
    }

    private void Help(Action fn, string title)
    {
      GUILayout.BeginArea(this._s.R_HelpPanel, title, this._s.STYLE_Panel);
      this._helpScroll = GUILayout.BeginScrollView(this._helpScroll);
      fn();
      GUILayout.EndScrollView();
      GUILayout.EndArea();
    }

    private void Fleet()
    {
      this.SimpleText(BetterLuaEditor._locFile.Get("String_ScriptsBasicInformation", "The Fleet Awareness API provides scripts basic information about the fleet the craft is in."));
      this.Field("FleetIndex", BetterLuaEditor._locFile.Get("Field_FleetIndex_Outputs", "[int] Position of the ship in the fleet, starting from 0."), BetterLuaEditor._locFile.Get("Field_FleetIndex_Functionality", "Returns the index of the ship in the fleet.  Starts at 0."), true);
      this.Field(nameof (Fleet), BetterLuaEditor._locFile.Get("Field_Fleet_Outputs", "[FleetInfo] Information about the fleet"), BetterLuaEditor._locFile.Get("Field_Fleet_Functionality", "Returns the current state of the fleet."), true);
      this.Field("IsFlagship", BetterLuaEditor._locFile.Get("Field_IsFlagship_Outputs", "[bool] Is the craft the fleet flagship?"), BetterLuaEditor._locFile.Get("Field_IsFlagship_Functionality", "Used to determine whether the ship is a flagship of a fleet."), true);
      this.Structure("FleetInfo", BetterLuaEditor._locFile.Get("Field_FleetInfo_ID", "ID:[int] Unique ID of the fleet."), BetterLuaEditor._locFile.Get("Field_FleetInfo_Name", "Name:[string] Name of the fleet."), BetterLuaEditor._locFile.Get("Field_FleetInfo_Flagship", "Flagship: [FriendlyInfo] Information about the flagship of the fleet."), BetterLuaEditor._locFile.Get("Field_FleetInfo_Members", "Members: [FriendlyInfo[]] A table of information regarding the fleet's members.  MAY CONTAIN NILS!"));
    }

    private void ResourceZones()
    {
      this.SimpleText(BetterLuaEditor._locFile.Get("String_RequireADetector", "Scripts can use the following fields to get information about known resource zones.  May change in the future to require a detector."));
      this.Field(nameof (ResourceZones), BetterLuaEditor._locFile.Get("Field_ResourceZones_Outputs", "[ResourceZoneInfo[]] List of ResourceZones"), BetterLuaEditor._locFile.Get("Field_ResourceZones_Functionality", "Returns a Lua table containing a list of known resource zones."), true);
      this.Field("Resources", BetterLuaEditor._locFile.Get("Field_Resources_Outputs", "[ResourceInfo] Ship resource data"), BetterLuaEditor._locFile.Get("Field_Resources_Functionality", "Returns information about a ship's available resources."), true);
      this.Structure("ResourceZoneInfo", BetterLuaEditor._locFile.Get("Field_ResourceZoneInfo_ID", "Id [int]: Unique ID of the Resource Zone"), BetterLuaEditor._locFile.Get("Field_ResourceZoneInfo_Name", "Name [string]: Name of the Resource Zone"), BetterLuaEditor._locFile.Get("Field_ResourceZoneInfo_Position", "Position [Vector3]: Position of the Resource Zone"), BetterLuaEditor._locFile.Get("Field_ResourceZoneInfo_Radius", "Radius [float]: Radius of the Resource Zone"), BetterLuaEditor._locFile.Get("Field_ResourceZoneInfo_Resources", "Resources [ResourceInfo]: Available resources of the Resource Zone"));
      this.Structure("ResourceInfo", BetterLuaEditor._locFile.Get("Field_ResourceInfo_CrystalTotal", "CrystalTotal [float]: Total Crystal resources."), BetterLuaEditor._locFile.Get("Field_ResourceInfo_CrystalMax", "CrystalMax [float]: Max Crystal resources."), BetterLuaEditor._locFile.Get("Field_ResourceInfo_MetalTotal", "MetalTotal [float]: Total Metal resources."), BetterLuaEditor._locFile.Get("Field_ResourceInfo_MetalMax", "MetalMax [float]: Max Metal resources."), BetterLuaEditor._locFile.Get("Field_ResourceInfo_NaturalTotal", "NaturalTotal [float]: Total Natural resources."), BetterLuaEditor._locFile.Get("Field_ResourceInfo_NaturalMax", "NaturalMax [float]: Max Natural resources."), BetterLuaEditor._locFile.Get("Field_ResourceInfo_OilTotal", "OilTotal [float]: Total Oil resources."), BetterLuaEditor._locFile.Get("Field_ResourceInfo_OilMax", "OilMax [float]: Max Oil resources."), BetterLuaEditor._locFile.Get("Field_ResourceInfo_ScrapTotal", "ScrapTotal [float]: Total Scrap resources."), BetterLuaEditor._locFile.Get("Field_ResourceInfo_ScrapMax", "ScrapMax [float]: Max Scrap resources."));
    }

    private void Friendlies()
    {
      this.SimpleText(BetterLuaEditor._locFile.Get("String_PositionsOfFriendlyVehiclesIn", "The following API will provide you with the positions of friendly vehicles- in the same manner as "));
      this.Function("GetFriendlyCount()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetFriendlyCount_Outputs", "[int] the number of friendlies spawned into the world"), BetterLuaEditor._locFile.Get("Field_GetFriendlyCount_Functionality", "Returns the number of friendly constructs"));
      this.Function("GetFriendlyInfo(index)", BetterLuaEditor._locFile.Get("Field_GetFriendlyInfo_Inputs", "index: [int] 0 is the first construct"), BetterLuaEditor._locFile.Get("Field_GetFriendlyInfo_Outputs", "[FriendlyInfo] the FriendlyInfo object"), BetterLuaEditor._locFile.Get("Field_GetFriendlyInfo_Functionality", "Returns a friendly info object for a friendly vehicle"));
      this.Function("GetFriendlyInfoById(Id)", BetterLuaEditor._locFile.Get("Field_GetFriendlyInfoByID_Inputs", "Id: [int] the Id you want"), BetterLuaEditor._locFile.Get("Field_GetFriendlyInfoByID_Outputs", "[FriendlyInfo] the FriendlyInfo object"), BetterLuaEditor._locFile.Get("Field_GetFriendlyInfoByID_Functionality", "Returns a friendly info object for an Id"));
      this.Structure("FriendlyInfo", BetterLuaEditor._locFile.Get("Field_FriendlyInfo_Valid", "Valid:[bool] false if the Friendly Info could not be retrieved"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_Rotation", "Rotation:[Quaternion] the rotation of the friendly construct"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_ReferencePosition", "ReferencePosition: [Vector3] the position of the construct (world East Up North frame) from which PositiveSize and Negative size are referenced"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_PositiveSize", "PositiveSize: [Vector3] the extent of the construct in the right,up,forwards direction relative to ReferencePostion"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_NegativeSize", "NegativeSize: [Vector3] the extent of the construct in the left,down,back direction relative to ReferencePosition"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_CenterOfMass", "CenterOfMass: [Vector3] the centre of mass of the construct in world East Up North frame"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_Velocity", "Velocity: [Vector3] the velocity of the construct in world East Up North frame"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_UpVector", "UpVector: [Vector3] The up vector in world East Up North frame"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_RightVector", "RightVector: [Vector3] The up vector in world East Up North frame"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_ForwardVector", "ForwardVector: [Vector3] The forward vector in world East Up North frame"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_HealthFraction", "HealthFraction: [float] the fraction of health (including turrets etc)"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_SparesFraction", "SparesFraction: [float] the spares fraction. Returns 1 if no spares storage present"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_AmmoFraction", "AmmoFraction: [float] the ammo fraction. Returns 1 if no ammo storage present"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_FuelFraction", "FuelFraction: [float] the fuel fraction. Returns 1 if no fuel storage present"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_EnergyFraction", "EnergyFraction: [float] the energy fraction. Returns 1 if no batteries present"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_PowerFraction", "PowerFraction: [float] the power fraction. Returns 1 if no fuel storage present"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_ElectricPowerFraction", "ElectricPowerFraction: [float] the electric power fraction. Returns 1 if no fuel storage present"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_AxisAlignedBoundingBoxMinimum", "AxisAlignedBoundingBoxMinimum: [Vector3] the world East Up North minimum extent of the construct"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_AxisAlignedBoundingBoxMaximum", "AxisAlignedBoundingBoxMaximum: [Vector3] the world East Up North maximum extent of the construct"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_BlueprintName", "BlueprintName: [string] the name"), BetterLuaEditor._locFile.Get("Field_FriendlyInfo_ID", "Id: [int] the unique Id of the construct"));
    }

    private void Spinners()
    {
      this.SimpleText(BetterLuaEditor._locFile.Get("String_SpinBlocksSpinners", "Spin blocks spinners have their own interface because they use 'SubConstruct' identifiers"));
      this.Function("SetSpinBlockSpeedFactor(SubConstructIdentifier,speedFactor)", BetterLuaEditor._locFile.Get("Field_SetSpinBlockSpeedFactor_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct.\r\nspeedFactor:[float] 0 to 1, the fractional power output"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetSpinBlockSpeedFactor_Functionality", "Set the speed factor. In continuous mode spinners this allows some blades to spin slower than others, in insta-spin blades this is related to the speed they are spinning at (1 is max speed, 0 is no speed), and in rotation spinners this does nothing."));
      this.Function("SetSpinBlockPowerDrive(SubConstructIdentifier,drive)", BetterLuaEditor._locFile.Get("Field_SetSpinBlockPowerDrive_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct.\r\n\t\t\t\t\t\tdrive:[float] the relative power use of the spinner (0 to 10)."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetSpinBlockPowerDrive_Functionality", "Sets the power drive. this allows heliblades to produce more force. Requires engine power. 0 removes engine use. 10 is maximum power use."));
      this.Function("SetSpinBlockRotationAngle(SubConstructIdentifier, angle)", BetterLuaEditor._locFile.Get("Field_SetSpinBlockRotationAngle_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct.\nangle:[float] angle in degrees to turn to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetSpinBlockRotationAngle_Functionality", "Sets the angle of rotation. Changes the spinner into Rotate mode. 'Rotatebackwards' is not available through this interface but you shouldn't need it."));
      this.Function("SetSpinBlockContinuousSpeed(SubConstructIdentifier, speed)", BetterLuaEditor._locFile.Get("Field_SetSpinBlockContinuousSpeed_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct.\nspeed:[float] speed to rotate at. 30 is the maximum so values from -30 to 30 work."), "", BetterLuaEditor._locFile.Get("Field_SetSpinBlockContinuousSpeed_Functionality", "Sets the speed of rotation. Changes the spinner into continuous mode. 'ContinuouseReverse' mode is not available through this interface so set the speed negative to facilitate reverse spinning."));
      this.Function("SetSpinBlockInstaSpin(SubConstructIdentifier,magnitudeAndDirection)", BetterLuaEditor._locFile.Get("Field_SetSpinBlockInstaSpin_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct.\r\nmagnitudeAndDirection:[float] -1 means spin backwards full speed, 1 is spin forwards full speed"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetSpinBlockInstaSpin_Functionality", "Spins the blades in a direction and speed determined by magnitudeAndDirection. Will set the spinner into instaspin forwards mode and will affect speed factor variable of the spinner."));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_UseSubconstructIdentifiers", "Pistons have their own interface because they use 'SubConstruct' identifiers"));
      this.Function("GetPistonExtension(SubConstructIdentifier)", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct.", BetterLuaEditor._locFile.Get("Field_GetPistonExtension_Outputs", "[float] the extension distance of the piston in meters"), BetterLuaEditor._locFile.Get("Field_GetPistonExtension_Functionality", "Get the extension of the piston, -1 if not found."));
      this.Function("GetPistonVelocity(SubConstructIdentifier)", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct.", BetterLuaEditor._locFile.Get("Field_GetPistonVelocity_Outputs", "[float] the velocity of the piston in meters per second"), BetterLuaEditor._locFile.Get("Field_GetPistonVelocity_Functionality", "Get the velocity of the piston (always positive), -1 if not found."));
      this.Function("SetPistonExtension(SubConstructIdentifier,ExtensionDistance)", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct.\r\nExtensionDistance:[float]the extension distance of the piston (in meters, will be clamped if necessary)", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetPistonExtension_Functionality", "Set the extension of the piston."));
      this.Function("SetPistonVelocity(SubConstructIdentifier,ExtensionVelocity)", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct.\r\nExtensionDistance:[float]the velocity of the piston in meters per second (between 0.1 and 2)", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetPistonVelocity_Functionality", "Set the velocity of the piston."));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_DedicatedHelicopterSpinners", "Dedicated helicopter spinners have their own interface because they have their own indexing system"));
      this.Function("GetDedibladeCount()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetDedibladeCount_Outputs", "[int] the number of dedicated helicopter spinners"), BetterLuaEditor._locFile.Get("Field_GetDedibladeCount_Functionality", "Returns the number of dedicated helicopter spinners"));
      this.Function("GetDedibladeInfo(DedibladeIndex)", BetterLuaEditor._locFile.Get("Field_GetDedibladeInfo_Inputs", "DedibladeIndex:[int] 0 is the first dedicated helicopter spinner"), BetterLuaEditor._locFile.Get("Field_GetDedibladeInfo_Outputs", "[BlockInfo] a block info object for the dedicated helicopter spinner."), BetterLuaEditor._locFile.Get("Field_GetDedibladeInfo_Functionality", "Returns block info for the dedicated helicopter spinner."));
      this.Function("IsDedibladeOnHull(DedibladeIndex)", BetterLuaEditor._locFile.Get("Field_IsDedibladeOnHull_Inputs", "DedibladeIndex:[int] 0 is the first dedicated helicopter spinner"), BetterLuaEditor._locFile.Get("Field_IsDedibladeOnHull_Outputs", "[bool] true if on hull"), BetterLuaEditor._locFile.Get("Field_IsDedibladeOnHull_Functionality", "Returns whether the dedicated helicopter spinner is on the hull or on a SubConstruct."));
      this.Function("SetDedibladeSpeedFactor(DedibladeIndex,speedFactor)", BetterLuaEditor._locFile.Get("Field_SetDedibladeSpeedFactor_Inputs", "DedibladeIndex:[int] 0 is the first dedicated helicopter spinner.\r\nspeedFactor:[float] 0 to 1, the fractional power output"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetDedibladeSpeedFactor_Functionality", "Set the speed factor. In continuous mode spinners this allows some blades to spin slower than others, in insta-spin blades this is related to the speed they are spinning at (1 is max speed, 0 is no speed), and in rotation spinners this does nothing."));
      this.Function("SetDedibladePowerDrive(DedibladeIndex,drive)", BetterLuaEditor._locFile.Get("Field_SetDedibladePowerDrive_Inputs", "DedibladeIndex:[int] 0 is the first dedicated helicopter spinner.\r\ndrive:[float] the relative power use of the dedicated helicopter spinner (0 to 10)."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetDedibladePowerDrive_Functionality", "Sets the power drive. this allows heliblades to produce more force. Requires engine power. 0 removes engine use. 10 is maximum power use."));
      this.Function("SetDedibladeContinuousSpeed(DedibladeIndex, speed)", BetterLuaEditor._locFile.Get("Field_SetDedibladeContinuousSpeed_Inputs", "DedibladeIndex:[int] 0 is the first dedicated helicopter spinner.\nspeed:[float] speed to rotate at. 30 is the maximum so values from -30 to 30 work."), "", BetterLuaEditor._locFile.Get("Field_SetDedibladeContinuousSpeed_Functionality", "Sets the speed of rotation. Changes the dedicated helicopter spinner into continuous mode. 'ContinuouseReverse' mode is not available through this interface so set the speed negative to facilitate reverse spinning."));
      this.Function("SetDedibladeInstaSpin(DedibladeIndex,magnitudeAndDirection)", BetterLuaEditor._locFile.Get("Field_SetDedibladeInstaSpin_Inputs", "DedibladeIndex:[int] 0 is the first dedicated helicopter spinner.\r\nmagnitudeAndDirection:[float] -1 means spin backwards full speed, 1 is spin forwards full speed"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetDedibladeInstaSpin_Functionality", "Spins the blades in a direction and speed determined by magnitudeAndDirection. Will set the dedicated helicopter spinner into instaspin forwards mode and will affect speed factor variable of the spinner."));
      this.Function("SetDedibladeUpFraction(DedibladeIndex,upFraction)", BetterLuaEditor._locFile.Get("Field_SetDedibladeUpFraction_Inputs", "DedibladeIndex:[int] 0 is the first dedicated helicopter spinner.\nupFraction:[float] 0 to 1."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetDedibladeUpFraction_Functionality", "Sets the fraction of the force that will be applied directly upwards, regardless of blade orientation."));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_SubconstructsSetOfFunctions", "From now on, these functions are obsolete, please use the 'SubConstructs' set of functions"));
      this.Function("GetSpinnerCount() - Obsolete, please see the 'SubConstructs' set of functions", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetSpinnerCount_Outputs", "[int] the number of spinners. This includes 'dedicated helispinners', which may be mounted on traditional spin blocks."), BetterLuaEditor._locFile.Get("Field_GetSpinnerCount_Functionality", "Returns the number of spin blocks and dedicated helispinners"));
      this.Function("GetSpinnerInfo(index) - Obsolete, please see the 'SubConstructs' set of functions", BetterLuaEditor._locFile.Get("Field_GetSpinnerInfo_Inputs", "index:[int] 0 is the first spin block"), BetterLuaEditor._locFile.Get("Field_GetSpinnerInfo_Outputs", "[BlockInfo] a block info object for the spin block."), BetterLuaEditor._locFile.Get("Field_GetSpinnerInfo_Functionality", "Returns block info for the spinner. For a spin block it will return block info where local positions and rotations are those of the actual spinning assembly, not the block itself."));
      this.Function("SetSpinnerSpeedFactor(index,speedFactor) - Obsolete, please see the 'SubConstructs' set of functions", BetterLuaEditor._locFile.Get("Field_SetSpinnerSpeedFactor_Inputs", "index:[int] the index of the spinner.\r\n\t\t\t\t\t\tspeedFactor:[float] 0 to 1, the fractional power output"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetSpinnerSpeedFactor_Functionality", "Set the speed factor. In continuous mode spinners this allows some blades to spin slower than others, in insta-spin blades this is related to the speed they are spinning at (1 is max speed, 0 is no speed), and in rotation spinners this does nothing."));
      this.Function("SetSpinnerPowerDrive(index,drive) - Obsolete, please see the 'SubConstructs' set of functions", BetterLuaEditor._locFile.Get("Field_SetSpinnerPowerDrive_Inputs", "index[int] the index of the spinner. 0 is the first.\r\n\t\t\t\t\t\tdrive:[float] the relative power use of the spinner (0 to 10)."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetSpinnerPowerDrive_Functionality", "Sets the power drive. this allows heliblades to produce more force. Requires engine power. 0 removes engine use. 10 is maximum power use."));
      this.Function("SetSpinnerRotationAngle(index, angle) - Obsolete, please see the 'SubConstructs' set of functions", BetterLuaEditor._locFile.Get("Field_SetSpinnerRotationAngle_Inputs", "index:[int] 0 is the first spinner.\nangle:[float] angle in degrees to turn to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetSpinnerRotationAngle_Functionality", "Sets the angle of rotation. Changes the spinner into Rotate mode. 'Rotatebackwards' is not available through this interface but you shouldn't need it."));
      this.Function("SetSpinnerContinuousSpeed(index, speed) - Obsolete, please see the 'SubConstructs' set of functions", BetterLuaEditor._locFile.Get("Field_SetSpinnerContinuousSpeed_Inputs", "index:[int] 0 is the first spinner.\nspeed:[float] speed to rotate at. 30 is the maximum so values from -30 to 30 work."), "", BetterLuaEditor._locFile.Get("Field_SetSpinnerContinuousSpeed_Functionality", "Sets the speed of rotation. Changes the spinner into continuous mode. 'ContinuouseReverse' mode is not available through this interface so set the speed negative to facilitate reverse spinning."));
      this.Function("SetSpinnerInstaSpin(index,magnitudeAndDirection) - Obsolete, please see the 'SubConstructs' set of functions", BetterLuaEditor._locFile.Get("Field_SetSpinnerInstaSpin_Inputs", "index:[int] 0 is the first spinner.\r\nmagnitudeAndDirection:[float] -1 means spin backwards full speed, 1 is spin forwards full speed"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetSpinnerInstaSpin_Functionality", "Spins the blades in a direction and speed determined by magnitudeAndDirection. Will set the spinner into instaspin forwards mode and will affect speed factor variable of the spinner."));
      this.Function("IsSpinnerDedicatedHelispinner(index) - Obsolete", BetterLuaEditor._locFile.Get("Field_IsSpinnerDedicatedHelispinner_Inputs", "index:[int] 0 is the first spinner."), BetterLuaEditor._locFile.Get("Field_IsSpinnerDedicatedHelispinner_Outputs", "[bool] true if the spinner is a dedicated spinner."), BetterLuaEditor._locFile.Get("Field_IsSpinnerDedicatedHelispinner_Functionality", "Returns whether the spinner in question is a dedicated helispinner"));
      this.Function("IsSpinnerOnHull(index) - Obsolete, please see the 'IsDedibladeOnHull' or 'IsSubConstructOnHull' function", BetterLuaEditor._locFile.Get("Field_isSpinnerOnHull_Inputs", "index:[int] 0 is the first spinner"), BetterLuaEditor._locFile.Get("Field_IsSpinnerOnHull_Outputs", "[bool] true if on hull"), BetterLuaEditor._locFile.Get("Field_IsSpinnerOnHull_Functionality", "Returns whether the spinner is on the hull or on another spin block. This can only be true for dedicated helispinners"));
      this.Function("SetDedicatedHelispinnerUpFraction(index,upFraction) - Obsolete, please use the 'SetDedibladeUpFraction' function", BetterLuaEditor._locFile.Get("Field_SetDedicatedHelispinnerUpFraction_Inputs", "index:[int] 0 is the first spinner.\nupFraction:[float] 0 to 1."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetDedicatedHelispinnerUpFraction_Functionality", "Only works for dedicated helispinners. Sets the fraction of the force that will be applied directly upwards, regardless of blade orientation."));
    }

    private void SubConstructs()
    {
      this.SimpleText(BetterLuaEditor._locFile.Get("String_AUniquePersistentIndex", "SubConstructs (turrets and spin blocks) have their own interface dedicated to work with stacked SubConstructs. They all have a unique persistent index which will never be modified in the blueprint (that index starts at 1)"));
      this.Function("GetAllSubconstructsCount()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetAllSubConstructsCount_Outputs", "[int] the total number of SubConstructs on the vehicle"), BetterLuaEditor._locFile.Get("Field_GetAllSubConstructsCount_Functionality", "Returns the number of SubConstructs on the vehicle, including SubConstructs on SubConstructs"));
      this.Function("GetSubConstructIdentifier(index)", BetterLuaEditor._locFile.Get("Field_GetSubconstructIdentifier_Inputs", "index:[int] 0 is the first SubConstruct"), BetterLuaEditor._locFile.Get("Field_GetSubconstructIdentifier_Outputs", "[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_GetSubconstructIdentifier_Functionality", "Returns the identifier of the SubConstruct. The indices start at 0 and are in no particular order"));
      this.Function("GetSubconstructsChildrenCount(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_GetSubconstructsChildrenCount_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_GetSubconstructsChildrenCount_Outputs", "[int] all the number of SubConstructs directly placed on the given SubConstruct."), BetterLuaEditor._locFile.Get("Field_GetSubconstructsChildrenCount_Functionality", "Returns the number of SubConstructs on the given SubConstruct"));
      this.Function("GetSubConstructChildIdentifier(SubConstructIdentifier, index)", BetterLuaEditor._locFile.Get("Field_GetSubconstructChildIdentifier_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the parent SubConstruct\nindex:[int] 0 is the first child SubConstruct"), BetterLuaEditor._locFile.Get("Field_GetSubconstructChildIdentifier_Outputs", "[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_GetSubconstructChildIdentifier_Functionality", "Returns the identifier of the child SubConstruct placed on the parent SubConstruct. The indices start at 0 and are in no particular order"));
      this.Function("GetParent(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_GetParent_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_GetParent_Outputs", "[int] the persistent index of the parent SubConstruct of the given SubConstruct."), BetterLuaEditor._locFile.Get("Field_GetParent_Functionality", "Returns the persistent index of the parent SubConstruct of the given SubConstruct, '0' for the MainConstruct, '-1' if not found"));
      this.Function("IsTurret(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_IsTurret_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_IsTurret_Outputs", "[bool] 'true' if the SubConstruct is a turret, 'false' otherwise."), BetterLuaEditor._locFile.Get("Field_IsTurret_Functionality", "Indicates if the SubConstruct is a turret or not"));
      this.Function("IsSpinBlock(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_IsSpinBlock_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_IsSpinBlock_Outputs", "[bool] 'true' if the SubConstruct is a spin block, 'false' otherwise."), BetterLuaEditor._locFile.Get("Field_IsSpinBlock_Functionality", "Indicates if the SubConstruct is a spin block or not"));
      this.Function("IsPiston(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_IsPiston_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_IsPiston_Outputs", "[bool] 'true' if the SubConstruct is a piston, 'false' otherwise."), BetterLuaEditor._locFile.Get("Field_IsPiston_Functionality", "Indicates if the SubConstruct is a piston or not"));
      this.Function("IsAlive(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_IsAlive_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_IsAlive_Outputs", "[bool] 'true' if the SubConstruct is not completely destroyed."), BetterLuaEditor._locFile.Get("Field_IsAlive_Functionality", "Indicates if the SubConstruct is destroyed or not"));
      this.Function("IsSubConstructOnHull(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_IsSubConstructOnHull_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_IsSubConstructOnHull_Outputs", "[bool] 'true' if the SubConstruct is on the hull."), BetterLuaEditor._locFile.Get("Field_IsSubConstructOnHull_Functionality", "Indicates if the SubConstruct is on the hull or not"));
      this.Function("GetSubConstructInfo(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_GetSubConstructInfo_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_GetSubConstructInfo_Outputs", "[BlockInfo] a BlockInfo object for the SubConstruct active block (the SpinBlock block, the piston or the turret block)"), BetterLuaEditor._locFile.Get("Field_GetSubConstructInfo_Functionality", "Returns a BlockInfo object for the active block of the SubConstruct, and invalid BlockInfo if the SubConstruct hasn't been found."));
      this.Function("GetSubConstructIdleRotation(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_GetSubConstructIdleRotation_Inputs", "SubConstructIdentifier:[int] the persistent identifier of the SubConstruct"), BetterLuaEditor._locFile.Get("Field_GetSubConstructIdleRotation_Outputs", "[Quaternion] the rotation of the subconstruct relative to its parent as it was first placed."), BetterLuaEditor._locFile.Get("Field_GetSubConstructIdleRotation_Functionality", "Returns a Quaternion representing the orientation of the block in its parent SubConstruct as it was when it was placed."));
    }

    private void Libraries()
    {
      this.Heading("Mathf");
      this.SimpleText(BetterLuaEditor._locFile.Get("String_FunctionIsStaticallyCalled", "The Mathf Library is full of functions you can google. Each function is statically called so use Mathf.Min(1,2) rather than Mathf:Min(1,2)."));
      this.Heading("Vector3");
      this.SimpleText(BetterLuaEditor._locFile.Get("String_MoreInformationOnThisLibrary", "Unity's Vector3 library is full exposed to you. You can create a new Vector3 with v =  Vector3(x,y,z), and call functions such as Vector3.Angle(v1,v2). Google Unity Vector3 for more information on this library"));
      this.Heading("Quaternion");
      this.SimpleText(BetterLuaEditor._locFile.Get("String_FindOutMore", "Unity's Quaternion library is fully exposed to you also. Google it to find out more"));
    }

    private void GuiMaths()
    {
      this.Function("Maths_AngleBetweenVectors(v1x,v1y,v1z,v2x,v2y,v2z)", BetterLuaEditor._locFile.Get("Field_MathsAngleBetweenVectors_Inputs", "[floats] don't worry about normalisation"), BetterLuaEditor._locFile.Get("Field_MathsAngleBetweenVectors_Outputs", "[float] angle between v1 and v2 in degrees"), BetterLuaEditor._locFile.Get("Field_MathsAngleBetweenVectors_Functionality", "Return the angle between two vectors v1 and v2. Has an overload for accepting two Vector3 structures."));
      this.Function("Maths_CreateVector3(x, y, z)", BetterLuaEditor._locFile.Get("Field_MathsCreateVector_Inputs", "x,y,z: [floats] the values of x y and z for your Vector3 object"), BetterLuaEditor._locFile.Get("Field_MathsCreateVector_Outputs", "[Vector3] your Vector3 is returned"), BetterLuaEditor._locFile.Get("Field_MathsCreateVector_Functionality", "Returns an 'official' Vector3, which you may need as an input to some functions."));
      this.Function("Maths_CreateQuaternion(forward, up)", BetterLuaEditor._locFile.Get("Field_MathsCreateQuaternion_Inputs", "forwards: [Vector3] the forwards vector for this rotation\nup:[Vector3] the up vector for this rotation"), BetterLuaEditor._locFile.Get("Field_MathsCreateQuaternion_Outputs", "[Quaternion] a quaternion structure for which you can use for rotations"), BetterLuaEditor._locFile.Get("Field_MathsCreateQuaternion_Functionality", "Returns a quaternion which you can use to rotate vectors"));
      this.Function("Maths_RotateVector3(vector, quaternion)", BetterLuaEditor._locFile.Get("Field_MathsRotateVector3_Inputs", "vector:[Vector3] your vector.\nquaternion:[Quaternion] your rotation quaternion"), BetterLuaEditor._locFile.Get("Field_MathsRotateVector3_Outputs", "[Vecotr3] your rotated vector"), BetterLuaEditor._locFile.Get("Field_MathsRotateVector3_Functionality", "Rotates a vector by a rotation"));
      this.Function("QuaternionToEulerAngles(quaternion)", BetterLuaEditor._locFile.Get("Field_QuaternionToEulerAngles_Inputs", "quaternion:[Quaternion] the quaternion you want the Euler angles for"), BetterLuaEditor._locFile.Get("Field_QuaternionToEulerAngles_Outputs", "[Vector3] the Euler Angles (pitch,yaw,roll)(x,y,z)"), BetterLuaEditor._locFile.Get("Field_QuaternionToEulerAngles_Functionality", "Returns the Euler Angles for your Quaternion"));
    }

    public void GuiMissileGuidance()
    {
      this.SimpleText("Connect LUA Transceivers to your missile blocks to allow missiles from those missile blocks to be send LUA Guidance points");
      this.Function("GetLuaTransceiverCount()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetLuaTranscieverCount_Outputs", "[int] the number of LuaTransceivers"), BetterLuaEditor._locFile.Get("Field_GetLuaTranscieverCount_Functionality", "Return the number of LuaTransceivers. Each transceiver can have a number of missiles which are controllable"));
      this.Function("GetLuaControlledMissileCount(luaTransceiverIndex)", BetterLuaEditor._locFile.Get("Field_GetLuaControlledMissileCount_Inputs", "luaTransceiverIndex: [int] the index of the LuaTransceiver where 0 is the first one"), BetterLuaEditor._locFile.Get("Field_GetLuaControlledMissileCount_Outputs", "[int] the number of missiles associated with that LuaTransceiver"), BetterLuaEditor._locFile.Get("Field_GetLuaControlledMissileCount_Functionality", "Returns the number of missiles which that luaTransceiver has communications link to"));
      this.Function("GetLuaTransceiverInfo(luaTransceiverIndex)", BetterLuaEditor._locFile.Get("Field_GetLuaTransceiverInfo_Inputs", "luaTransceiverIndex: [int] the index of the LuaTransceiver where 0 is the first one"), BetterLuaEditor._locFile.Get("Field_GetLuaTransceiverInfo_Outputs", "[BlockInfo] a BlockInfo object for the LuaTransceiver's Launchpad"), BetterLuaEditor._locFile.Get("Field_GetLuaTransceiverInfo_Functionality", "Returns a BlockInfo object for the LuaTransceiver's Launchpad. If no Launch pad exists it'll return it for the LuaTransceiver."));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_ComponentsTab", "See the Components tab for the BlockInfo structure"));
      this.Function("GetLuaControlledMissileInfo(luaTransceiverIndex,missileIndex)", BetterLuaEditor._locFile.Get("Field_GetLuaControlledMissileInfo_Inputs", "luaTransceiverIndex: [int] 0 is the first one.\nmissileIndex: [int] 0 is the first missile."), BetterLuaEditor._locFile.Get("Field_GetLuaControlledMissileInfo_Outputs", "[MissileWarningInfo] Get a MissileWarningInfo object for your missile."), BetterLuaEditor._locFile.Get("Field_GetLuaControlledMissileInfo_Functionality", "Returns a MissileWarningInfo structure for your missile. You can tell where it is and how fast it is going from this"));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_MissileWarningTab", "See the Missile Warning tab for the MissileWarningInfo structure"));
      this.Function("SetLuaControlledMissileAimPoint(luaTransceiverIndex,missileIndex,x,y,z)", BetterLuaEditor._locFile.Get("Field_SetLuaControlledMissileAimPoint_Inputs", "luaTransceiverIndex: [int] as above.\nmissileIndex:[int] as above.\n x,y,z: [floats] global coordinates of the aim point"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetLuaControlledMissileAimPoint_Functionality", "Sets the aim point. No guidance modules will help achieve this aim point so do your own predictive guidance. Needs a lua receiver component ON the missile to work."));
      this.Function("DetonateLuaControlledMissile(luaTransceiverIndex,missileIndex)", BetterLuaEditor._locFile.Get("Field_DetonateLuaControlledMissile_Inputs", "luaTransceiverIndex: [int] as above.\nmissileIndex:[int] as above."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_DetonateLuaControlledMissile_Functionality", "Explodes the missile. Needs a lua receiver component ON the missile to work."));
      this.Function("IsLuaControlledMissileAnInterceptor(luaTransceiverIndex,missileIndex)", BetterLuaEditor._locFile.Get("Field_IsLuaControlledMissileAnInterceptor_Inputs", "luaTranceiverIndex:[int] 0 is the first one\r\nmissileIndex:[int] 0 is the first one"), BetterLuaEditor._locFile.Get("Field_IsLuaControlledMissileAnInterceptor_Outputs", "[bool]: true means the missile has an interceptor module, otherwise false is returned. If the missile has no lua receiver false will be returned."), BetterLuaEditor._locFile.Get("Field_IsLuaControlledMissileAnInterceptor_Functionality", "Find out if the missile has an interceptor capability."));
      this.Function("SetLuaControlledMissileInterceptorTarget(luaTransceiverIndex,missileIndex,targetIndex)", BetterLuaEditor._locFile.Get("Field_SetLuaControlledMissileInterceptorTarget_Inputs", "luaTransceiverIndex:[int] 0 is the first one\r\nmissileIndex:[int] 0 is the first one,\r\ntargetIndex:[int] 0 is the first missile which that mainframe has a warning for"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetLuaControlledMissileInterceptorTarget_Functionality", "Set the target of an interceptor missile to be a specific missile for which a warning exists. This is enough to get the interceptor missile to behave normally but if you want to actually guide it yourself use SetLuaControlledMissileInterceptorStandardGuidanceOnOff to turn the guidance off."));
      this.Function("SetLuaControlledMissileInterceptorStandardGuidanceOnOff(luaTranceiver,missileIndex, onOff)", BetterLuaEditor._locFile.Get("Field_SetLuaControlledMissileInterceptorStandardGuidanceOnOff_Inputs", "luaTransceiverIndex:[int] 0 is the first one\r\nmissileIndex:[int] 0 is the first one\r\nonOff:[bool] true will use standard missile guidance to aim at the interceptors target, false will rely on SetLuaControlledMissileAimPoint for aiming coordinates."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetLuaControlledMissileInterceptorStandardGuidanceOnOff_Functionality", "Turns standard guidance for the missile on and off. Turn it off if you're going to guide the missile in yourself."));
    }

    public void GuiMissileWarning()
    {
      this.Function("GetNumberOfWarnings()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetNumberOfWarnings_Outputs", "[int] the number of missiles being warned on"), BetterLuaEditor._locFile.Get("Field_GetNumberOfWarnings_Functionality", "Return the number of missiles the construct has warnings for"));
      this.Function("GetMissileWarning(missileIndex)", BetterLuaEditor._locFile.Get("Field_GetMissileWarning_Inputs", "missileIndex: [int] the index of the missile"), BetterLuaEditor._locFile.Get("Field_GetMissileWarning_Outputs", "[MissileWarningInfo] information on the missile. missileWarningInfo.Valid = false if you didn't request an existing missile index"), BetterLuaEditor._locFile.Get("Field_GetMissileWarning_Functionality", "Request information on a specific missile warning"));
      this.Structure("MissileWarningInfo", BetterLuaEditor._locFile.Get("Field_MissileWarningInfo_Valid", "Valid: [bool] false if the warning is junk due to incorrect indices. "), BetterLuaEditor._locFile.Get("Field_MissileWarningInfo_Position", "Position: [Vector3] the position of the missile"), BetterLuaEditor._locFile.Get("Field_MissileWarningInfo_Velocity", "Velocity: [Vector3] the velocity of the missile in meters per second"), BetterLuaEditor._locFile.Get("Field_MissileWarningInfo_Range", "Range : [float] the distance from centre of mass of your construct to the missile"), BetterLuaEditor._locFile.Get("Field_MissileWarningInfo_Azimuth", "Azimuth :[float] the azimuth angle between your construct's forward direction and the missile (degrees)"), BetterLuaEditor._locFile.Get("Field_MissileWarningInfo_Elevation", "Elevation: [float] the elevation angle between your construct's forward direction and the missile (degrees)"), BetterLuaEditor._locFile.Get("Field_MissileWarningInfo_TimeSinceLaunch", "TimeSinceLaunch: [float] the time since missile launch."), BetterLuaEditor._locFile.Get("Field_MissileWarningInfo_ID", "Id: [int] the unique Id of the missile"));
    }

    public void GuiWeapons()
    {
      this.Function("GetWeaponCount()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetWeaponCount_Outputs", "[int] the number of weapons on the hull- doesn't include weapons on the turrets but does include the turrets themselves."), BetterLuaEditor._locFile.Get("Field_GetWeaponCount_Functionality", "Get the number of weapons on the hull. Knowing is number is useful for when you want to call GetWeaponInfo(i) to find out weapon information."));
      this.Function("GetWeaponInfo(weaponIndex)", BetterLuaEditor._locFile.Get("Field_GetWeaponInfo_Inputs", "weaponIndex: [int] the index of the weapon you want information on. 0 is the first weapon."), BetterLuaEditor._locFile.Get("Field_GetWeaponInfo_Outputs", "[WeaponInfo] information on the weapon. weaponInfo.Valid is false if you ask for an invalid weaponIndex."), BetterLuaEditor._locFile.Get("Field_GetWeaponInfo_Functionality", "Gets weapon information for a specific weapon. Useful to figure out what sort of weapon is present."));
      this.Structure("WeaponInfo", BetterLuaEditor._locFile.Get("Field_WeaponInfo_Valid", "Valid [bool]: false means this WeaponInfo packet is useless. Move onto the next valid one."), BetterLuaEditor._locFile.Get("Field_WeaponInfo_LocalPosition", "LocalPosition [Vector3]: the local position in the vehicle of the weapon. x is right, y is up and z is forwards."), BetterLuaEditor._locFile.Get("Field_WeaponInfo_GlobalPosition", "GlobalPosition [Vector3]: the global position of the weapon. x is East, y is Up and Z is North."), BetterLuaEditor._locFile.Get("Field_WeaponInfo_LocalFirePoint", "LocalFirePoint [Vector3]: the local position in the vehicle where the projectile or laser will be created."), BetterLuaEditor._locFile.Get("Field_WeaponInfo_GlobalFirePoint", "GlobalFirePoint [Vector3]: the global position in the world where the projectile or laser will be created."), BetterLuaEditor._locFile.Get("Field_WeaponInfo_Speed", "Speed [float]: the speed in meters per second of the weapon- approximately correct for most weapon types."), BetterLuaEditor._locFile.Get("Field_WeaponInfo_CurrentDirection", "CurrentDirection [Vector3]: the direction in global coordinate system that the weapon is facing"), BetterLuaEditor._locFile.Get("Field_WeaponInfo_WeaponType", "WeaponType [int]: the type of the weapon. cannon = 0,missile = 1 ,laser = 2,harpoon = 3,turret = 4,missilecontrol = 5,fireControlComputer  =6"), BetterLuaEditor._locFile.Get("Field_WeaponInfo_WeaponSlot", "WeaponSlot [int]: the weapon slot of the weapon itself. 0 -> 5."), BetterLuaEditor._locFile.Get("Field_WeaponInfo_WeaponSlotMask", "WeaponSlotMask [int]: the weapon slot bit mask. The rightmost bit represents 'ALL' and is always on, and the second bit represents slot 1, etc. (for example 100111 will respond to slots All, 1, 2, and 5)"), BetterLuaEditor._locFile.Get("Field_WeaponInfo_PlayerCurrentlyControllingIt", "PlayerCurrentlyControllingIt [bool]: true if the player is controlling this weapon at the moment"));
      this.Function("GetWeaponConstraints(weaponIndex)", BetterLuaEditor._locFile.Get("Field_GetWeaponConstraints_Inputs", "weaponIndex: [int] the index of the weapon you want the constraints off. 0 is the first weapon."), BetterLuaEditor._locFile.Get("Field_GetWeaponConstraints_Outputs", "[WeaponConsraints] information on the field-of-fire constraints of the weapon."), BetterLuaEditor._locFile.Get("Field_GetWeaponConstraints_Functionality", "Gets field-of-fire constrains information for a specific weapon."));
      this.Structure("WeaponConstraints", BetterLuaEditor._locFile.Get("Field_WeaponConstraints_Valid", "Valid [bool]: false means this WeaponConstraints packet is useless. Move onto the next valid one."), BetterLuaEditor._locFile.Get("Field_WeaponConstraints_MinAzimuth", "MinAzimuth [float]: the minimum azimuth angle in degrees."), BetterLuaEditor._locFile.Get("Field_WeaponConstraints_MaxAzimuth", "MaxAzimuth [float]: the maximum azimuth angle in degrees."), BetterLuaEditor._locFile.Get("Field_WeaponConstraints_MinElevation", "MinElevation [float]: the minimum elevation angle in degrees."), BetterLuaEditor._locFile.Get("Field_WeaponConstraints_MaxElevation", "MaxElevation [float]: the maximum elevation angle in degrees."), BetterLuaEditor._locFile.Get("Field_WeaponConstraints_FlipAzimuth", "FlipAzimuth [bool]: true if the 'Flip azimuth constraints' toggle is selected."), BetterLuaEditor._locFile.Get("Field_WeaponConstraints_InParentConstructSpace", "InParentConstructSpace [bool]: true if the 'Set the restrictions in the parent construct space' toggle is selected."));
      this.Function("GetWeaponBlockInfo(weaponIndex)", BetterLuaEditor._locFile.Get("Field_GetWeaponBlockInfo_Inputs", "weaponIndex: [int] the index of the weapon you want information on. 0 is the first weapon."), BetterLuaEditor._locFile.Get("Field_GetWeaponBlockInfo_Outputs", "[BlockInfo] the block information of the main component of the weapon. See 'Components' for information on BlockInfo."), BetterLuaEditor._locFile.Get("Field_GetWeaponBlockInfo_Functionality", "Gets the block information for a specific weapon."));
      this.Function("AimWeaponInDirection(weaponIndex, x,y,z, weaponSlot)", BetterLuaEditor._locFile.Get("Field_AimWeaponInDirection_Inputs", "weaponIndex: [int] 0 is the first weapon.\nx,y,z: [floats] the world coordinate scheme direction components to point in. They don't need to be normalised.\nweaponSlot: [int] 0 for all, otherwise 1 to 5."), BetterLuaEditor._locFile.Get("Field_AimWeaponInDirection_Outputs", "[int] the number of weapons that can fire in this direction. 0 for none."), BetterLuaEditor._locFile.Get("Field_AimWeaponInDirection_Functionality", "Aims a weapon in a specific direction. For a turret this will aim all weapons on the turret as well as the turret itself."));
      this.Function("FireWeapon(weaponIndex, weaponSlot)", BetterLuaEditor._locFile.Get("Field_FireWeapon_Inputs", "weaponIndex: [int] 0 is the first weapon.\nweaponSlot: [int] 0 will control all weapons"), BetterLuaEditor._locFile.Get("Field_FireWeapon_Outputs", "[bool] has any weapon fired? will be true if so."), BetterLuaEditor._locFile.Get("Field_FireWeapon_Functionality", "Fires a specific weapon. It's important for most weapons that you aim them first as they won't fire if they can't fire in the direction they are aimed."));
      this.Function("GetTurretSpinnerCount() - Obsolete", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetTurretSpinnerCount_Outputs", "[int] the number of turrets and spinners on the construct"), BetterLuaEditor._locFile.Get("Field_GetTurretSpinnerCount_Functionality", "Returns the number of turrets and spinners on the construct. You'll need this function if you want to control turreted or spin block mounted weapons individually"));
      this.Function("GetWeaponCountOnTurretOrSpinner(turretSpinnerIndex) - Obsolete, please use 'GetWeaponCountOnSubConstruct' instead", BetterLuaEditor._locFile.Get("Field_GetWeaponCountOnTurretOrSpinner_Inputs", "turretSpinnerIndex: [int] 0 is the first turret or spinner"), BetterLuaEditor._locFile.Get("Field_GetWeaponCountOnTurretOrSpinner_Outputs", "[int] the number of weapons on this turret or spinner, not including the turret itself"), BetterLuaEditor._locFile.Get("Field_GetWeaponCountOnTurretOrSpinner_Functionality", "return the number of weapons on the turret or spinner. If you wanted to control the turret itself then note that it is treated as a hull mounted weapon."));
      this.Function("GetWeaponInfoOnTurretOrSpinner(turretSpinnerIndex, weaponIndex) - Obsolete, please use 'GetWeaponInfoOnSubConstruct' instead", BetterLuaEditor._locFile.Get("Field_GetWeaponInfoOnTurretOrSpinner_Inputs", "turretSpinnerIndex: [int] the index of the turret or spinner. 0 is the first one.\nweaponIndex: [int] the index of the weapon. 0 is the first one."), BetterLuaEditor._locFile.Get("Field_GetWeaponInfoOnTurretOrSpinner_Outputs", "[WeaponInfo] a WeaponInfo object. See above for the definition of this structure. Note that changes to this structure in LUA do not affect the weapon itself."), BetterLuaEditor._locFile.Get("Field_GetWeaponInfoOnTurretOrSpinner_Functionality", "Get weapon info of a weapon on a turret or spinner"));
      this.Function("AimWeaponInDirectionOnTurretOrSpinner(turretSpinnerIndex,weaponIndex,x,y,z,weaponSlot) - Obsolete, please use 'AimWeaponInDirectionOnSubConstruct' instead", BetterLuaEditor._locFile.Get("Field_AimWeaponInDirectionOnTurretOrSpinner_Inputs", "First argument is now the turret spinner index, otherwise see 'AimWeaponInDirection'"), BetterLuaEditor._locFile.Get("Field_AimWeaponInDirectionOnTurretOrSpinner_Outputs", "as per AimWeaponInDirection"), BetterLuaEditor._locFile.Get("Field_AimWeaponInDirectionOnTurretOrSpinner_Functionality", "Aims a specific weapon on the turret without aiming the turret"));
      this.Function("FireWeaponOnTurretOrSpinner(turretSpinnerIndex,weaponIndex,weaponSlot) - Obsolete, please use 'FireWeaponOnSubConstruct' instead", BetterLuaEditor._locFile.Get("Field_FireWeaponOnTurretOrSpinner_Inputs", "First argument is now the turret spinner index, otherwise see 'FireWeapon'"), BetterLuaEditor._locFile.Get("Field_FireWeaponOnTurretOrSpinner_Outputs", "[bool] has any weapon fired? will be true if so."), BetterLuaEditor._locFile.Get("Field_FireWeaponOnTurretOrSpinner_Functionality", "Fires a specific weapon. It's important for most weapons that you aim them first as they won't fire if they can't fire in the direction they are aimed."));
      this.Function("GetWeaponCountOnSubConstruct(SubConstructIdentifier)", BetterLuaEditor._locFile.Get("Field_GetWeaponCountOnSubConstruct_Inputs", "SubConstructIdentifier: [int] This identifier never change in the blueprint, use the SubConstructs-related functions to get it."), BetterLuaEditor._locFile.Get("Field_GetWeaponCountOnSubConstruct_Outputs", "[int] the number of weapons on this turret or spinner, not including the turret itself"), BetterLuaEditor._locFile.Get("Field_GetWeaponCountOnSubConstruct_Functionality", "return the number of weapons on the turret or spinner. If you wanted to control the turret itself then note that it is treated as a hull mounted weapon."));
      this.Function("GetWeaponInfoOnSubConstruct(SubConstructIdentifier, weaponIndex)", BetterLuaEditor._locFile.Get("Field_GetWeaponInfoOnSubConstruct_Inputs", "SubConstructIdentifier: [int] This identifier never change in the blueprint, use the SubConstructs-related functions to get it.\nweaponIndex: [int] the index of the weapon. 0 is the first one."), BetterLuaEditor._locFile.Get("Field_GetWeaponInfoOnSubConstruct_Outputs", "[WeaponInfo] a WeaponInfo object. See above for the definition of this structure. Note that changes to this structure in LUA do not affect the weapon itself."), BetterLuaEditor._locFile.Get("Field_GetWeaponInfoOnSubConstruct_Functionality", "Get weapon info of a weapon on a turret or spinner"));
      this.Function("GetWeaponConstraintsOnSubConstruct(SubConstructIdentifier, weaponIndex)", BetterLuaEditor._locFile.Get("Field_GetWeaponConstraintsOnSubConstruct_Inputs", "SubConstructIdentifier: [int] This identifier never change in the blueprint, use the SubConstructs-related functions to get it.\nweaponIndex: [int] the index of the weapon. 0 is the first one."), BetterLuaEditor._locFile.Get("Field_GetWeaponConstraintsOnSubConstruct_Outputs", "[WeaponConsraints] information on the field-of-fire constraints of the weapon."), BetterLuaEditor._locFile.Get("Field_GetWeaponConstraintsOnSubConstruct_Functionality", "Gets field-of-fire constrains information for a specific weapon."));
      this.Function("GetWeaponBlockInfoOnSubConstruct(SubConstructIdentifier, weaponIndex)", BetterLuaEditor._locFile.Get("Field_GetWeaponBlockInfoOnSubConstruct_Inputs", "SubConstructIdentifier: [int] This identifier never change in the blueprint, use the SubConstructs-related functions to get it.\nweaponIndex: [int] the index of the weapon. 0 is the first one."), BetterLuaEditor._locFile.Get("Field_GetWeaponBlockInfoOnSubConstruct_Outputs", "[BlockInfo] the block inforamation of the main component of the weapon. See 'Components' for information on BlockInfo."), BetterLuaEditor._locFile.Get("Field_GetWeaponBlockInfoOnSubConstruct_Functionality", "Gets the block information for a specific weapon."));
      this.Function("AimWeaponInDirectionOnSubConstruct(SubConstructIdentifier,weaponIndex,x,y,z,weaponSlot)", "'SubConstructIdentifier' is the SubConstruct identifier. For the other parameters, see 'AimWeaponInDirection'", BetterLuaEditor._locFile.Get("Field_AimWeaponInDirectionOnSubConstruct_Outputs", "as per AimWeaponInDirection"), BetterLuaEditor._locFile.Get("Field_AimWEaponInDirectionOnSubConstruct_Functionality", "Aims a specific weapon on the turret without aiming the turret"));
      this.Function("FireWeaponOnSubConstruct(SubConstructIdentifier,weaponIndex,weaponSlot)", "'SubConstructIdentifier' is the SubConstruct identifier. For the other parameters, see 'FireWeapon'", BetterLuaEditor._locFile.Get("Field_FireWeaponOnSubConstruct_Outputs", "[bool] has any weapon fired? will be true if so."), BetterLuaEditor._locFile.Get("Field_FireWeaponOnSubConstruct_Functionality", "Fires a specific weapon. It's important for most weapons that you aim them first as they won't fire if they can't fire in the direction they are aimed."));
    }

    public void GuiComponents()
    {
      this.Heading("Types");
      this.Structure(BetterLuaEditor._locFile.Get("Field_Types", "Component types and their logic."), BetterLuaEditor._locFile.Get("Field_Types_BalloonDeployer", " 0 = balloon deployer"), BetterLuaEditor._locFile.Get("Field_Types_BalloonDeployer_1", "\tbool 0  \tget     \tGet whether the balloon is deployed."), BetterLuaEditor._locFile.Get("Field_Types_BalloonDeployer_2", "       \t \tset     \tTrue to deploy the balloon. False to sever the balloon."), BetterLuaEditor._locFile.Get("Field_Types_BalloonDeployer_3", " 1 = drive maintainer"), BetterLuaEditor._locFile.Get("Field_Types_BalloonDeployer_4", "\tint 0   \tget/set \tGet/set the channel of the drive mainainer (0 = Primary, 1 = Secondary, 2 = Tertiary)."), BetterLuaEditor._locFile.Get("Field_Types_BalloonDeployer_5", "\tfloat 0 \tget/set \tGet/set the drive that the drive maintainer is set to."), BetterLuaEditor._locFile.Get("Field_Types_AllPump", " 2 = all pumps (helium and air)"), BetterLuaEditor._locFile.Get("Field_Types_AllPump_1", "\tbool 0  \tget     \tGet whether the pump is on (buoyancy fraction > 0)."), BetterLuaEditor._locFile.Get("Field_Types_AllPump_2", "       \t \tset     \tFalse sets buoyance fraction to 0. True sets buoyancy fraction to 1."), BetterLuaEditor._locFile.Get("Field_Types_AllPump_3", "\tfloat 0 \tget/set \tGet/set buoyancy fraction."), BetterLuaEditor._locFile.Get("Field_Types_AllPump_4", "\tfloat 1 \tget     \tGet fraction of volume that is flooded."), BetterLuaEditor._locFile.Get("Field_Types_ResourceGatherer", " 3 = resource gatherer"), BetterLuaEditor._locFile.Get("Field_Types_ResourceGatehrer_1", "\tbool 0  \tget/set \tOn/off."), BetterLuaEditor._locFile.Get("Field_Types_OilDrill", " 4 = oil drill."), BetterLuaEditor._locFile.Get("Field_Types_OilDrill_1", "\tbool 0  \tget/set \tOn/off."), BetterLuaEditor._locFile.Get("Field_Types_AmmoProcessor", " 5 = ammo processor"), BetterLuaEditor._locFile.Get("Field_Types_AmmoProcessor_1", "\tbool 0  \tget/set \tOn/off."), BetterLuaEditor._locFile.Get("Field_Types_FuelRefinery", " 6 = fuel refinery."), BetterLuaEditor._locFile.Get("Field_Types_FuelRefinery_1", "\tbool 0  \tget/set \tOn/off."), BetterLuaEditor._locFile.Get("Field_Types_FuelRefinery_2", "\tfloat 0 \tget     \tGet dangerous gas level."), BetterLuaEditor._locFile.Get("Field_Types_FuelRefinery_3", "\tfloat 1 \tget     \tGet refining efficiency."), BetterLuaEditor._locFile.Get("Field_Types_FuelRefinery_4", "\tfloat 2 \tget     \tGet time per batch."), BetterLuaEditor._locFile.Get("Field_Types_TractorBeams", " 7 = tractor beams"), BetterLuaEditor._locFile.Get("Field_Types_TractorBeams_1", "\tbool 0  \tget/set \tOn/off."), BetterLuaEditor._locFile.Get("Field_Types_TractorBeams_2", "\tint 0   \tget     \tGet the unique id of the selected vehicle. -1 if nothing is selected."), BetterLuaEditor._locFile.Get("Field_Types_TractorBeams_3", "       \t \tset     \tSelect the vehicle with the specified unique id."), BetterLuaEditor._locFile.Get("Field_Types_TractorBeams_4", "\tfloat 0 \tget/set \tGet/set hold distance."), BetterLuaEditor._locFile.Get("Field_Types_TractorBeams_5", "\tfloat 1 \tget/set \tGet/set hold azimuth."), BetterLuaEditor._locFile.Get("Field_Types_TractorBeams_6", "\tfloat 2 \tget/set \tGet/set hold elevation."), BetterLuaEditor._locFile.Get("Field_Types_Hydrofoils", " 8 = hydrofoils"), BetterLuaEditor._locFile.Get("Field_Types_Hydrofoils_1", "\tfloat 0 \tget/set \tGet/set angle."), BetterLuaEditor._locFile.Get("Field_Types_Propulsion", " 9 = propulsion"), BetterLuaEditor._locFile.Get("Field_Types_Propulsion_1", "\tfloat 0 \tget/set \tGet/set drive fraction."), BetterLuaEditor._locFile.Get("Field_Types_Propulsion_2", "\tfloat 1 \tget     \tGet propulsion requests to this component so far this frame."), BetterLuaEditor._locFile.Get("Field_Types_Propulsion_3", "       \t \tset     \tAdd a propulsion request to this component."), BetterLuaEditor._locFile.Get("Field_Types_Propulsion_4", "\tfloat 2 \tget     \tGet total propulsion request to this component last frame."), BetterLuaEditor._locFile.Get("Field_Types_Propulsion_5", "\tfloat 3 \tget     \tMax force of this component."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector", "10 = shield projector"), BetterLuaEditor._locFile.Get("Field_Types_ShielfProjector_1", "\tbool 0  \tget     \tGet whether the shield is functioning."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_2", "\tint 0   \tget/set \tGet/set the shield type (0 = off, 1 = reflect, 2 = disrupt, 3 = laser absorb)."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_3", "\tfloat 0 \tget/set \tGet/set strength."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_4", "\tfloat 1 \tget/set \tGet/set azimuth."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_5", "\tfloat 2 \tget/set \tGet/set elevation."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_6", "\tfloat 3 \tget/set \tGet/set range."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_7", "\tfloat 4 \tget/set \tGet/set width."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_8", "\tfloat 5 \tget/set \tGet/set height."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_9", "\tfloat 6 \tget/set \tGet/set alpha."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_10", "\tfloat 7 \tget/set \tGet/set red."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_11", "\tfloat 8 \tget/set \tGet/set green."), BetterLuaEditor._locFile.Get("Field_Types_ShieldProjector_12", "\tfloat 9 \tget/set \tGet/set blue."), BetterLuaEditor._locFile.Get("Field_Types_HeliumPump", "11 = helium pump"), BetterLuaEditor._locFile.Get("Field_Types_HeliumPump_1", "\tbool 0  \tget     \tGet whether the airpump is on (buoyancy fraction > 0)."), BetterLuaEditor._locFile.Get("Field_Types_HeliumPump_2", "       \t \tset     \tFalse sets buoyance fraction to 0. True sets buoyancy fraction to 1."), BetterLuaEditor._locFile.Get("Field_Types_HeliumPump_3", "\tfloat 0 \tget/set \tGet/set buoyancy fraction."), BetterLuaEditor._locFile.Get("Field_Types_HeliumPump_4", "\tfloat 1 \tget     \tGet fraction of volume that is flooded."), BetterLuaEditor._locFile.Get("Field_Types_Spotlight", "12 = spotlight"), BetterLuaEditor._locFile.Get("Field_Types_Spotlight_1", "\tfloat 0 \tget/set \tGet/set cone angle."), BetterLuaEditor._locFile.Get("Field_Types_Spotlight_2", "\tfloat 1 \tget/set \tGet/set azimuth angle."), BetterLuaEditor._locFile.Get("Field_Types_Spotlight_3", "\tfloat 2 \tget/set \tGet/set elevation angle."), BetterLuaEditor._locFile.Get("Field_Types_Spotlight_4", "\tfloat 3 \tget/set \tGet/set intensity."), BetterLuaEditor._locFile.Get("Field_Types_Spotlight_5", "\tfloat 4 \tget/set \tGet/set range."), BetterLuaEditor._locFile.Get("Field_Types_Spotlight_6", "\tfloat 5 \tget/set \tGet/set red."), BetterLuaEditor._locFile.Get("Field_Types_Spotlight_7", "\tfloat 6 \tget/set \tGet/set green."), BetterLuaEditor._locFile.Get("Field_Types_Spotlight_8", "\tfloat 7 \tget/set \tGet/set blue."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonLaserTargetter", "13 = advanced cannon laser targetter"), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonLaserTargetter_1", "\tint 0   \tget     \tGet the weapon index of the firing piece it is attached to. -1 otherwise."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonLaserTargetter_2", "\tfloat 0 \tget/set \tGet/set timed fuse time."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonLaserTargetter_3", "\tfloat 1 \tget     \tGet altitude fuse 'low' altitude."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonLaserTargetter_4", "       \t \tset     \tSet altitude fuse altitude."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonLaserTargetter_5", "\tfloat 2 \tget     \tGet altitude fuse 'high' altitude."), BetterLuaEditor._locFile.Get("Field_Types_CramCannonLaserTargetter", "14 = CRAM cannon laser targetter"), BetterLuaEditor._locFile.Get("Field_Types_CramCannonLaserTargetter_1", "\tint 0   \tget     \tGet the weapon index of the firing piece it is attached to. -1 otherwise."), BetterLuaEditor._locFile.Get("Field_Types_CramCannonLaserTargetter_2", "\tfloat 0 \tget/set \tGet/set timed fuse time."), BetterLuaEditor._locFile.Get("Field_Types_CramCannonLaserTargetter_3", "\tfloat 1 \tget     \tGet altitude fuse 'low' altitude."), BetterLuaEditor._locFile.Get("Field_Types_CramCannonLaserTargetter_4", "       \t \tset     \tSet altitude fuse altitude."), BetterLuaEditor._locFile.Get("Field_Types_CramCannonLaserTargetter_5", "\tfloat 2 \tget     \tGet altitude fuse 'high' altitude."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive", "15 = warp drive"), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_1", "\tbool 0  \tget     \tIs charging."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_2", "\tint 0   \tset     \t0 = start charging, 1 = warp."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_3", "\tfloat 0 \tget     \tRight jump distance."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_4", "\tfloat 1 \tget     \tUp jump distance."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_5", "\tfloat 2 \tget     \tForwards jump distance."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_6", "\tfloat 3 \tget     \tRight jump factor based on vehicle size and warp rod size."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_7", "\tfloat 4 \tget     \tUp jump factor."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_8", "\tfloat 5 \tget     \tForwards jump factor."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_9", "\tfloat 6 \tget     \tTotal length of attached chargers."), BetterLuaEditor._locFile.Get("Field_Types_WarpDrive_10", "\tfloat 7 \tget     \tCharge duration."), BetterLuaEditor._locFile.Get("Field_Types_ParticleCannonLense", "16 = particle cannon lense"), BetterLuaEditor._locFile.Get("Field_Types_ParticleCannonLense_1", "\tint 0   \tget     \tGet the weapon index of the firing piece it is attached to. -1 otherwise."), BetterLuaEditor._locFile.Get("Field_Types_SteamBoilerController", "17 = steam boiler controller"), BetterLuaEditor._locFile.Get("Field_Types_SteamBoilerController_1", "\tfloat 0 \tget/set \tGet/set burn rate."), BetterLuaEditor._locFile.Get("Field_Types_SteamBoilerController_2", "\tfloat 1 \tget     \tVolume of attached boiler."), BetterLuaEditor._locFile.Get("Field_Types_SteamBoilerController_3", "\tfloat 2 \tget     \tPressure of attached boiler."), BetterLuaEditor._locFile.Get("Field_Types_FuelEngineGenerator", "18 = fuel engine generator"), BetterLuaEditor._locFile.Get("Field_Types_FuelEngineGenerator_1", "\tfloat 0 \tget/set \tGet/set max relative rpm."), BetterLuaEditor._locFile.Get("Field_Types_FuelEngineGenerator_2", "\tfloat 1 \tget/set \tGet/set battery charge drive."), BetterLuaEditor._locFile.Get("Field_Types_FuelEngineGenerator_3", "\tfloat 2 \tget     \tCurrent relative rpm."), BetterLuaEditor._locFile.Get("Field_Types_FuelEngineGenerator_4", "\tfloat 3 \tget     \tEstimate of maximum power."), BetterLuaEditor._locFile.Get("Field_Types_FuelEngineGenerator_5", "\tfloat 4 \tget     \tFuel usage per second."), BetterLuaEditor._locFile.Get("Field_Types_SailMainBlock", "19 = sail main block"), BetterLuaEditor._locFile.Get("Field_Types_SailMainBlock_1", "\tint 0   \tget     \tGet the sail type (0 = three point sail, 1 = square rigged sail)."), BetterLuaEditor._locFile.Get("Field_Types_SailMainBlock_2", "\tfloat 0 \tget     \tMast winch setting."), BetterLuaEditor._locFile.Get("Field_Types_SailMainBlock_3", "       \t \tset     \tWinch mast towards this setting."), BetterLuaEditor._locFile.Get("Field_Types_SailMainBlock_4", "\tfloat 1 \tget     \tBoom winch setting."), BetterLuaEditor._locFile.Get("Field_Types_SailMainBlock_5", "       \t \tset     \tWinch boom towards this setting."), BetterLuaEditor._locFile.Get("Field_Types_SailMainTypes_6", "\tfloat 2 \tget     \tMast height."), BetterLuaEditor._locFile.Get("Field_Types_SailMainTypes_7", "\tfloat 3 \tget     \tBoom length."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonAmmOIntake", "20 = advanced cannon ammo intake"), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonAmmoIntake_1", "\tint 0   \tget     \tGet unique id of the associated ammo controller. -1 otherwise."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonAmmoIntake_2", "       \t \tset     \tSelect an ammo controller by its unique id."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonAmmoIntake_3", "\tint 1   \tget     \tGet component index of the associated ammo controller. -1 otherwise."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonAmmoIntake_4", "       \t \tset     \tSelect an ammo controller by its component index."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonAmmoIntake_5", "\tint 2   \tget     \tGet the weapon index of the firing piece it is attached to. -1 otherwise."), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonAmmoController", "21 = advanced cannon ammo controller"), BetterLuaEditor._locFile.Get("Field_Types_AdvancedCannonAmmoController_1", "\tint 0   \tget     \tGet unique id."), BetterLuaEditor._locFile.Get("Field_Types_AIWirelessTransmitter", "22 = AI wireless transmitter"), BetterLuaEditor._locFile.Get("Field_Types_AiWirelessTransmitter_1", "\tint 0   \tget/set \tGet/set channel."), BetterLuaEditor._locFile.Get("Field_Types_AIWirelessReceiver", "23 = AI wireless receiver"), BetterLuaEditor._locFile.Get("Field_Types_AIWirelessReceiver_1", "\tint 0   \tget/set \tGet/set channel."), BetterLuaEditor._locFile.Get("Field_Types_AIAimpointSelectionCard", "24 = AI aimpoint selection card"), BetterLuaEditor._locFile.Get("Field_Types_AIAimpointSelectionCard_1", "\tint 0   \tget/set \tGet/set aimpoint selection type (0 = random, 1 = ammo and AI)."), BetterLuaEditor._locFile.Get("Field_Types_AIAimpointSelectionCard_2", "\tfloat 0 \tget/set \tGet/set retarget time."), BetterLuaEditor._locFile.Get("Field_Types_DetectionComponent", "25 = detection component"), BetterLuaEditor._locFile.Get("Field_Types_DetectionComponent_1", "\tbool 0  \tget/set \tOn/off."), BetterLuaEditor._locFile.Get("Field_Types_AIMainframe", "26 = AI mainframe"), BetterLuaEditor._locFile.Get("Field_Types_AIMainframe_1", "\tint 0   \tget/set \tAI movement mode (0 = Off, 1 = Manual, 2 = Automatic, 3 = Fleet)."), BetterLuaEditor._locFile.Get("Field_Types_AIMainframe_2", "\tint 1   \tget/set \tAI firing mode (0 = Off, 1 = On)."), BetterLuaEditor._locFile.Get("Field_Types_LaserColorer", "27 = laser colorer"), BetterLuaEditor._locFile.Get("Field_Types_LaserColorer_1", "\tfloat 0 \tget/set \tGet/set red."), BetterLuaEditor._locFile.Get("Field_Types_LaserColorer_2", "\tfloat 1 \tget/set \tGet/set green."), BetterLuaEditor._locFile.Get("Field_Types_LaserColorer_3", "\tfloat 2 \tget/set \tGet/set blue."), BetterLuaEditor._locFile.Get("Field_Types_LaserMissileDefence", "28 = laser missile defence"), BetterLuaEditor._locFile.Get("Field_Types_LaserMissileDefence_1", "\tfloat 0 \tget/set \tGet/set red."), BetterLuaEditor._locFile.Get("Field_Types_LaserMissileDefence_2", "\tfloat 1 \tget/set \tGet/set green."), BetterLuaEditor._locFile.Get("Field_Types_LaserMissileDefence_3", "\tfloat 2 \tget/set \tGet/set blue."), BetterLuaEditor._locFile.Get("Field_Types_ParticleCannon", "29 = particle cannon"), BetterLuaEditor._locFile.Get("Field_Types_ParticleCannon_1", "\tfloat 0 \tget/set \tGet/set red."), BetterLuaEditor._locFile.Get("Field_Types_ParticleCannon_2", "\tfloat 1 \tget/set \tGet/set green."), BetterLuaEditor._locFile.Get("Field_Types_ParticleCannon_3", "\tfloat 2 \tget/set \tGet/set blue."), BetterLuaEditor._locFile.Get("Field_Types_LightFitting", "30 = light fitting"), BetterLuaEditor._locFile.Get("Field_Types_LightFitting_1", "\tfloat 0 \tget/set \tGet/set intensity."), BetterLuaEditor._locFile.Get("Field_Types_LightFitting_2", "\tfloat 1 \tget/set \tGet/set range."), BetterLuaEditor._locFile.Get("Field_Types_LightFitting_3", "\tfloat 2 \tget/set \tGet/set red."), BetterLuaEditor._locFile.Get("Field_Types_LightFitting_4", "\tfloat 3 \tget/set \tGet/set green."), BetterLuaEditor._locFile.Get("Field_Types_LightFitting_5", "\tfloat 4 \tget/set \tGet/set blue."), BetterLuaEditor._locFile.Get("Field_Types_SimpleLaser", "31 = simple laser"), BetterLuaEditor._locFile.Get("Field_Types_SimpleLaser_1", "\tfloat 0 \tget/set \tGet/set red."), BetterLuaEditor._locFile.Get("Field_Types_SimpleLaser_2", "\tfloat 1 \tget/set \tGet/set green."), BetterLuaEditor._locFile.Get("Field_Types_SimpleLaser_3", "\tfloat 2 \tget/set \tGet/set blue."), BetterLuaEditor._locFile.Get("Field_Types_SmokeGenerator", "32 = smoke generator"), BetterLuaEditor._locFile.Get("Field_Types_SmokeGenerator_1", "\tfloat 0 \tget/set \tGet/set particle speed."), BetterLuaEditor._locFile.Get("Field_Types_SmokeGenerator_2", "\tfloat 1 \tget/set \tGet/set particle size."), BetterLuaEditor._locFile.Get("Field_Types_SmokeGenerator_3", "\tfloat 2 \tget/set \tGet/set red."), BetterLuaEditor._locFile.Get("Field_Types_SmokeGenerator_4", "\tfloat 3 \tget/set \tGet/set green."), BetterLuaEditor._locFile.Get("Field_Types_SmokeGenerator_5", "\tfloat 4 \tget/set \tGet/set blue."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector", "33 = hologram projector"), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_1", "\tbool 0  \tget/set \tOn/off."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_2", "\tbool 1  \tget/set \tGet/set whether the image is mirrored."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_3", "\tfloat 0 \tget/set \tGet/set width."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_4", "\tfloat 1 \tget/set \tGet/set height."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_5", "\tfloat 2 \tget/set \tGet/set distance."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_6", "\tfloat 3 \tget/set \tGet/set right translation."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_7", "\tfloat 4 \tget/set \tGet/set up translation."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_8", "\tfloat 5 \tget/set \tGet/set azimuth."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_9", "\tfloat 6 \tget/set \tGet/set elevation."), BetterLuaEditor._locFile.Get("Field_Types_HologramProjector_10", "\tfloat 7 \tget/set \tGet/set rotation."), BetterLuaEditor._locFile.Get("Field_Types_PosterHolder", "34 = poster holder"), BetterLuaEditor._locFile.Get("Field_Types_PosterHolder_1", "\tfloat 0 \tget/set \tGet/set width."), BetterLuaEditor._locFile.Get("Field_Types_PosterHolder_2", "\tfloat 1 \tget/set \tGet/set height."), BetterLuaEditor._locFile.Get("Field_Types_ElectricEngine", "35 = electric engine"), BetterLuaEditor._locFile.Get("Field_Types_ElectricEngine_1", "\tfloat 0 \tget/set \tGet/set power fraction."), BetterLuaEditor._locFile.Get("Field_Types_SteamBoilerController_4", "36 = steam boiler controller"), BetterLuaEditor._locFile.Get("Field_Types_SteamBoilerController_5", "\tfloat 0 \tget/set \tGet/set burn rate."), BetterLuaEditor._locFile.Get("Field_Types_SteamBoilerController_6", "\tfloat 1 \tget     \tGet storage module pressure."), BetterLuaEditor._locFile.Get("Field_Types_AirPump", " 37 = air pump"), BetterLuaEditor._locFile.Get("Field_Types_AirPump_1", "\tbool 0  \tget     \tGet whether the airpump is on (buoyancy fraction > 0)."), BetterLuaEditor._locFile.Get("Field_Types_AirPump_2", "       \t \tset     \tFalse sets buoyance fraction to 0. True sets buoyancy fraction to 1."), BetterLuaEditor._locFile.Get("Field_Types_AirPump_3", "\tfloat 0 \tget/set \tGet/set buoyancy fraction."), BetterLuaEditor._locFile.Get("Field_Types_AirPump_4", "\tfloat 1 \tget     \tGet fraction of volume that is flooded."));
      this.Structure("BlockInfo", BetterLuaEditor._locFile.Get("Field_BlockInfo_Valid", "Valid:[bool] false means this BlockInfo packet is useless"), BetterLuaEditor._locFile.Get("Field_BlockInfo_Position", "Position:[Vector3] position in world (east,up,north)"), BetterLuaEditor._locFile.Get("Field_BlockInfo_LocalPosition", "LocalPosition:[Vector3] position in construct (right,up,forwards)"), BetterLuaEditor._locFile.Get("Field_BlockInfo_LocalPositionRelativeToCom", "LocalPositionRelativeToCom:[Vector3] local position relative to the center of mass"), BetterLuaEditor._locFile.Get("Field_BlockInfo_Forwards", "Forwards:[Vector3] forwards direction in world(east,up,north)"), BetterLuaEditor._locFile.Get("Field_BlockInfo_LocalForwards", "LocalForwards:[Vector3] forward direction in construct (right,up,forwards)"), BetterLuaEditor._locFile.Get("Field_BlockInfo_Rotation", "Rotation:[Quaternion] the rotation of the block in world coordinates"), BetterLuaEditor._locFile.Get("Field_BlockInfo_LocalRotation", "LocalRotation:[Quaternion] the rotation of the block in the vehicle's (or turret's) coordinate system."), "SubConstructIdentifier:[int] the sub construct identifier of the subconstruct the block is part of.", BetterLuaEditor._locFile.Get("Field_BlockInfo_CustomName", "CustomName:[string] the custom name assigned to the block"));
      this.Heading("Interface Functions / Methods");
      this.Function("Component_GetCount(type)", BetterLuaEditor._locFile.Get("Field_ComponentGetCount_Type", "type: [int] the type of component you want the count of."), BetterLuaEditor._locFile.Get("Field_ComponentGetCount_Outputs", "[int] the number of components of this type."), BetterLuaEditor._locFile.Get("Field_ComponentGetCount_Functionality", "Returns the number of components of this type"));
      this.Function("Component_GetLocalPosition(type,index)", BetterLuaEditor._locFile.Get("Field_ComponentGetLocalPosition_inputs", "type: [int] the type of component you want the local position of.\nindex: [int] the index of the component you want the position of.\n"), "[Vector3i] a Vector3i is a Vector3 where .x .y and .z are integers.", BetterLuaEditor._locFile.Get("Field_ComponentGetLocalPosition_Functionality", "Returns the local position in the vehicle of this component."));
      this.Function("Component_GetBlockInfo(type,index)", BetterLuaEditor._locFile.Get("Field_ComponentGetBlockInfo_Inputs", "type: [int] the type of component you want information on.\nindex: [int] the index of the component you want block info for..\n"), BetterLuaEditor._locFile.Get("Field_ComponentGetBlockInfo_Outputs", "[BlockInfo] a BlockInfo structure relating to the component."), BetterLuaEditor._locFile.Get("Field_ComponentGetBlockInfo_Functionality", "Returns an extensive BlockInfo object for the component."));
      this.Function("Component_GetBoolLogic(type, blockIndex)", BetterLuaEditor._locFile.Get("Field_ComponentGetBoolLogic_Inputs", "type: [int] the type of component you want boolean logic for.\nblockIndex: [int] the index of the component you want boolean logic for.\n"), BetterLuaEditor._locFile.Get("Field_ComponentGetBoolLogic_Outputs", "[bool] the first boolean logic for this component. For a component without boolean logic, or a block index that doesn't exist, false is returned."), BetterLuaEditor._locFile.Get("Field_ComponentGetBoolLogic_Functionality", "Returns a boolean (true/false) for a component. Depending on the type of this component this means different things (or nothing at all). Default return is false."));
      this.Function("Component_GetBoolLogic_1(type, blockIndex, propertyIndex)", BetterLuaEditor._locFile.Get("Field_ComponentGetBoolLogic1_Inputs", "type: [int] the type of component you want boolean logic for.\nblockIndex: [int] the index of the component you want boolean logic for.\npropertyIndex: [int] the index of the index of the boolean logic you want."), BetterLuaEditor._locFile.Get("Field_ComponentGetBoolLogic1_Outputs", "[bool] the specified boolean logic for this component. For a component without boolean logic, or an index that doesn't exist, false is returned."), BetterLuaEditor._locFile.Get("Field_ComponentGetBoolLogic1_Functionality", "Returns a boolean (true/false) for a component. Depending on the type of this component this means different things (or nothing at all). Default return is false."));
      this.Function("Component_SetBoolLogic(type,index,bool)", BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogic_Inputs", "type: [int] the type of component you want to set boolean logic for.\nindex: [int] the index of the component you want to set boolean logic for.\nbool: [bool] the true/false you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogic_Functionality", "Sets the first boolean logic for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetBoolLogic_1(type, blockIndex, propertyIndex1, bool1)", BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogic1_Inputs", "type: [int] the type of component you want to set boolean logic for.\nblockIndex: [int] the index of the component you want to set boolean logic for.\npropertyIndex1: [int] the index of the boolean logic you want to set.\nbool1: [bool] the true/false you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogic1_Functionality", "Sets the specified boolean logic for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetBoolLogic_2(type, blockIndex, propertyIndex1, bool1, propertyIndex2, bool2)", BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogic2_Inputs", "type: [int] the type of component you want to set boolean logic for.\nblockIndex: [int] the index of the component you want to set boolean logic for.\npropertyIndex1: [int] the index of the first boolean logic you want to set.\nbool1: [bool] the true/false you want to set the first logic to.\npropertyIndex2: [int] the index of the second boolean logic you want to set.\nbool2: [bool] the true/false you want to set the second logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogic2_Functionality", "Sets the two specified boolean logics for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetBoolLogic_3(type, blockIndex, propertyIndex1, bool1, propertyIndex2, bool2, propertyIndex3, bool3)", BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogic3_Inputs", "type: [int] the type of component you want to set boolean logic for.\nblockIndex: [int] the index of the component you want to set boolean logic for.\npropertyIndex1: [int] the index of the first boolean logic you want to set.\nbool1: [bool] the true/false you want to set the first logic to.\npropertyIndex2: [int] the index of the second boolean logic you want to set.\nbool2: [bool] the true/false you want to set the second logic to.\npropertyIndex3: [int] the index of the third boolean logic you want to set.\nbool3: [bool] the true/false you want to set the third logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogic3_Functionality", "Sets the three specified boolean logics for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_GetFloatLogic(type, blockIndex)", BetterLuaEditor._locFile.Get("Field_ComponmentGetFloatLogic_Inputs", "type: [int] the type of component you want float logic for.\nblockIndex: [int] the index of the component you want float logic for.\n"), BetterLuaEditor._locFile.Get("Field_ComponenGetFloatLogic_Outputs", "[float] the first float logic for this component. For a component without float logic, or a block index that doesn't exist, 0 is returned."), BetterLuaEditor._locFile.Get("Field_ComponentGetFloatLogic_Functionality", "Returns a floating point value for a component. Depending on the type of this component this means different things (or nothing at all). Default return is 0."));
      this.Function("Component_GetFloatLogic_1(type, blockIndex, propertyIndex)", BetterLuaEditor._locFile.Get("Field_ComponentGetFloatLogic1_Inputs", "type: [int] the type of component you want float logic for.\nblockIndex: [int] the index of the component you want float logic for.\npropertyIndex: [int] the index of the index of the float logic you want."), BetterLuaEditor._locFile.Get("Field_ComponentGetFloatLogic1_Outputs", "[float] the specified float logic for this component. For a component without float logic, or an index that doesn't exist, 0 is returned."), BetterLuaEditor._locFile.Get("Field_ComponentGetFloatLogic1_Functionality", "Returns a floating point value for a component. Depending on the type of this component this means different things (or nothing at all). Default return is 0."));
      this.Function("Component_SetFloatLogic(type,index,float)", BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogic_Inputs", "type: [int] the type of component you want to set float logic for.\nindex: [int] the index of the component you want to set float logic for.\nfloat: [float] the floating point value you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogic_Functionality", "Sets the first float logic for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetFloatLogic_1(type, blockIndex, propertyIndex1, float1)", BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogic1_Inputs", "type: [int] the type of component you want to set float logic for.\nblockIndex: [int] the index of the component you want to set float logic for.\npropertyIndex1: [int] the index of the float logic you want to set.\nfloat1: [float] the floating point value you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogic1_Functionality", "Sets the specified float logic for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetFloatLogic_2(type, blockIndex, propertyIndex1, float1, propertyIndex2, float2)", BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogic2_Inputs", "type: [int] the type of component you want to set float logic for.\nblockIndex: [int] the index of the component you want to set float logic for.\npropertyIndex1: [int] the index of the first float logic you want to set.\nfloat1: [float] the floating point value you want to set the first logic to.\npropertyIndex2: [int] the index of the second float logic you want to set.\nfloat2: [float] the floating point value you want to set the second logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogic2_Functionality", "Sets the two specified float logics for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetFloatLogic_3(type, blockIndex, propertyIndex1, float1, propertyIndex2, float2, propertyIndex3, float3)", BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogic3_Inputs", "type: [int] the type of component you want to set float logic for.\nblockIndex: [int] the index of the component you want to set float logic for.\npropertyIndex1: [int] the index of the first float logic you want to set.\nfloat1: [float] the floating point value you want to set the first logic to.\npropertyIndex2: [int] the index of the second float logic you want to set.\nfloat2: [float] the floating point value you want to set the second logic to.\npropertyIndex3: [int] the index of the third float logic you want to set.\nfloat3: [float] the floating point value you want to set the third logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogic3_Functionality", "Sets the three specified float logics for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_GetIntLogic(type, blockIndex)", BetterLuaEditor._locFile.Get("Field_ComponentGetIntLogic_Inputs", "type: [int] the type of component you want int logic for.\nblockIndex: [int] the index of the component you want int logic for.\n"), BetterLuaEditor._locFile.Get("Field_ComponentGetIntLogic_Outputs", "[int] the first int logic for this component. For a component without int logic, or a block index that doesn't exist, 0 is returned."), BetterLuaEditor._locFile.Get("Field_ComponentGetIntLogic_Functionality", "Returns a integer number for a component. Depending on the type of this component this means different things (or nothing at all). Default return is 0."));
      this.Function("Component_GetIntLogic_1(type, blockIndex, propertyIndex)", BetterLuaEditor._locFile.Get("Field_ComponentGetIntLogic1_Inputs", "type: [int] the type of component you want int logic for.\nblockIndex: [int] the index of the component you want int logic for.\npropertyIndex: [int] the index of the index of the int logic you want."), BetterLuaEditor._locFile.Get("Field_ComponentGetIntLogic1_Outputs", "[int] the specified int logic for this component. For a component without int logic, or an index that doesn't exist, 0 is returned."), BetterLuaEditor._locFile.Get("Field_ComponentGetIntLogic1_Functionality", "Returns a integer number for a component. Depending on the type of this component this means different things (or nothing at all). Default return is 0."));
      this.Function("Component_SetIntLogic(type,index,int)", BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogic_Inputs", "type: [int] the type of component you want to set int logic for.\nindex: [int] the index of the component you want to set int logic for.\nint: [int] the integer number you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogic_Functionality", "Sets the first int logic for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetIntLogic_1(type, blockIndex, propertyIndex1, int1)", BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogic1_Inputs", "type: [int] the type of component you want to set int logic for.\nblockIndex: [int] the index of the component you want to set int logic for.\npropertyIndex1: [int] the index of the int logic you want to set.\nint1: [int] the integer number you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogic1_Functionality", "Sets the specified int logic for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetIntLogic_2(type, blockIndex, propertyIndex1, int1, propertyIndex2, int2)", BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogic2_Inputs", "type: [int] the type of component you want to set int logic for.\nblockIndex: [int] the index of the component you want to set int logic for.\npropertyIndex1: [int] the index of the first int logic you want to set.\nint1: [int] the integer number you want to set the first logic to.\npropertyIndex2: [int] the index of the second int logic you want to set.\nint2: [int] the integer number you want to set the second logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogic2_Functionality", "Sets the two specified int logics for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetIntLogic_3(type, blockIndex, propertyIndex1, int1, propertyIndex2, int2, propertyIndex3, int3)", BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogic3_Inputs", "type: [int] the type of component you want to set int logic for.\nblockIndex: [int] the index of the component you want to set int logic for.\npropertyIndex1: [int] the index of the first int logic you want to set.\nint1: [int] the integer number you want to set the first logic to.\npropertyIndex2: [int] the index of the second int logic you want to set.\nint2: [int] the integer number you want to set the second logic to.\npropertyIndex3: [int] the index of the third int logic you want to set.\nint3: [int] the integer number you want to set the third logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogic3_Functionality", "Sets the three specified int logics for a component. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetBoolLogicAll(type, bool)", BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogicAll_Inputs", "type: [int] the type of component you want to set boolean logic for.\bool [bool] the bool (true/false) you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogicAll_Functionality", "Sets the first boolean logic for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetBoolLogicAll_1(type, propertyIndex1, bool1)", BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogicAll1_Inputs", "type: [int] the type of component you want to set boolean logic for.\nblockIndex: [int] the index of the component you want to set boolean logic for.\npropertyIndex1: [int] the index of the boolean logic you want to set.\nbool1: [bool] the true/false you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogicAll1_Functionality", "Sets the specified boolean logic for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetBoolLogicAll_2(type, propertyIndex1, bool1, propertyIndex2, bool2)", BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogicAll2_Inputs", "type: [int] the type of component you want to set boolean logic for.\npropertyIndex1: [int] the index of the first boolean logic you want to set.\nbool1: [bool] the true/false you want to set the first logic to.\npropertyIndex2: [int] the index of the second boolean logic you want to set.\nbool2: [bool] the true/false you want to set the second logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogicAll2_Functionality", "Sets the two specified boolean logics for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetBoolLogicAll_3(type, propertyIndex1, bool1, propertyIndex2, bool2, propertyIndex3, bool3)", BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogicAll3_Inputs", "type: [int] the type of component you want to set boolean logic for.\npropertyIndex1: [int] the index of the first boolean logic you want to set.\nbool1: [bool] the true/false you want to set the first logic to.\npropertyIndex2: [int] the index of the second boolean logic you want to set.\nbool2: [bool] the true/false you want to set the second logic to.\npropertyIndex3: [int] the index of the third boolean logic you want to set.\nbool3: [bool] the true/false you want to set the third logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetBoolLogicAll3_Functionality", "Sets the three specified boolean logics for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetFloatLogicAll(type, float)", BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogicAll_Inputs", "type: [int] the type of component you want to set floating point logic for.\nfloat [float] the floating point number you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogicAll_Functionality", "Sets the first floating point logic for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetFloatLogicAll_1(type, propertyIndex1, float1)", BetterLuaEditor._locFile.Get("Field_SetFloatLogicAll1_Inputs", "type: [int] the type of component you want to set float logic for.\npropertyIndex1: [int] the index of the float logic you want to set.\nfloat1: [float] the floating point value you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogicAll1_Functionality", "Sets the specified floating point logic for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetFloatLogicAll_2(type, propertyIndex1, float1, propertyIndex2, float2)", BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogicAll2_Inputs", "type: [int] the type of component you want to set float logic for.\npropertyIndex1: [int] the index of the first float logic you want to set.\nfloat1: [float] the floating point value you want to set the first logic to.\npropertyIndex2: [int] the index of the second float logic you want to set.\nfloat2: [float] the floating point value you want to set the second logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogicAll2_Functionality", "Sets the two specified floating point logics for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetFloatLogicAll_3(type, propertyIndex1, float1, propertyIndex2, float2, propertyIndex3, float3)", BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogicAll3_Inputs", "type: [int] the type of component you want to set float logic for.\npropertyIndex1: [int] the index of the first float logic you want to set.\nfloat1: [float] the floating point value you want to set the first logic to.\npropertyIndex2: [int] the index of the second float logic you want to set.\nfloat2: [float] the floating point value you want to set the second logic to.\npropertyIndex3: [int] the index of the third float logic you want to set.\nfloat3: [float] the floating point value you want to set the third logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetFloatLogicAll3_Functionality", "Sets the three specified floating point logics for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetIntLogicAll(type, int)", BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogicAll_Inputs", "type: [int] the type of component you want to set integer logic for.\nfloat [int] the integer you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogicAll_Functionality", "Sets the first integer logic for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetIntLogicAll_1(type, propertyIndex1, int1)", BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogicAll1_Inputs", "type: [int] the type of component you want to set int logic for.\npropertyIndex1: [int] the index of the int logic you want to set.\nint1: [int] the integer number you want to set."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogicAll1_Functionality", "Sets the specified integer logic for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetIntLogicAll_2(type, propertyIndex1, int1, propertyIndex2, int2)", BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogicAll2_Inputs", "type: [int] the type of component you want to set int logic for.\npropertyIndex1: [int] the index of the first int logic you want to set.\nint1: [int] the integer number you want to set the first logic to.\npropertyIndex2: [int] the index of the second int logic you want to set.\nint2: [int] the integer number you want to set the second logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogicAll2_Functionality", "Sets the two specified integer logics for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("Component_SetIntLogicAll_3(type, propertyIndex1, int1, propertyIndex2, int2, propertyIndex3, int3)", BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogicAll3_Inputs", "type: [int] the type of component you want to set int logic for.\npropertyIndex1: [int] the index of the first int logic you want to set.\nint1: [int] the integer number you want to set the first logic to.\npropertyIndex2: [int] the index of the second int logic you want to set.\nint2: [int] the integer number you want to set the second logic to.\npropertyIndex3: [int] the index of the third int logic you want to set.\nint3: [int] the integer number you want to set the third logic to."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ComponentSetIntLogicAll3_Functionality", "Sets the three specified integer logics for all components of a specific type. Depending on the type of this component this means different things (or nothing at all)."));
      this.Function("SetHologramProjectorURL(index, url)", BetterLuaEditor._locFile.Get("Field_SetHologramProjectorURL_Inputs", "type: [int] the index of the hologram projector.\nurl: [string] the url to set the hologram projector to as a string."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetHologramProjectorURL_Functionality", "Sets the url of the specified hologram projector"));
      this.Function("SetPosterHolderURL(index, url)", BetterLuaEditor._locFile.Get("Field_SetPosterHolderURL_Inputs", "type: [int] the index of the poster holder.\nurl: [string] the url to set the poster holder to as a string."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetPosterHolderURL_Functionality", "Sets the url of the specified poster holder"));
    }

    public void GuiLogging()
    {
      this.Function("Log(message)", BetterLuaEditor._locFile.Get("Field_Log_Inputs", "message: [string] the message you want to write to the log."), BetterLuaEditor._locFile.Get("NA", "N/A"), "Writes a message to the log. Log is visible when editing the LUA box and appears in the 'Errors / Log' panel. The last 100 log messages are maintained.");
      this.Function("ClearLogs()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_ClearLogs_Functionality", "Clears your log. Pretty harmless!"));
      this.Function("LogToHud(message)", BetterLuaEditor._locFile.Get("Field_LogToHud_Inputs", "message: [string] the message you want to write to the HUD."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_LogToHud_Functionality", "Writes a message to the HUD. HUD messages are visible during normal play and when on the map."));
    }

    public void GuiMisc()
    {
      this.Function("GetTerrainAltitudeForPosition(x,y,z)", BetterLuaEditor._locFile.Get("Field_GetTerrainAltitudeForPosition_Inputs", "x: [float] game world east west position in meters.\ny: [float] game world vertical (not important)\nz: game world north south position in meters."), BetterLuaEditor._locFile.Get("Field_GetTerrainAltitudeForPosition_Outputs", "[float] the terrain altitude in meters where 0 is sea level."), BetterLuaEditor._locFile.Get("Field_GetTerrainAltitudeForPosition_Functionality", "Returns altitude of the terrain at a position in the world. Can be overloaded with a single Vector3 rather than x,y,z components."));
      this.Function("GetTerrainAltitudeForLocalPosition(x,y,z)", BetterLuaEditor._locFile.Get("Field_GetTerrainAltitudeForLocalPosition_Inputs", "x: [float] right offset from construct position in meters.\ny: [float] up offset from construct position in meters\nz: forwards offset from construct position in meters."), BetterLuaEditor._locFile.Get("Field_GetTerrainAltitudeForLocalPosition_Outputs", "[float] the terrain altitude in meters where 0 is sea level."), BetterLuaEditor._locFile.Get("Field_GetTerrainAltitudeForLocalPosition_Functionality", "Returns altitude of the terrain at a position relative to the construct. Can be overloaded with a single Vector3 rather than x,y,z components."));
      this.Function("GetGravityForAltitude(alt)", BetterLuaEditor._locFile.Get("Field_GetGravityForAltitude_Inputs", "alt: [float] altitude (0 is sea level)"), BetterLuaEditor._locFile.Get("Field_GetGravityForAltitude_Outputs", "[Vector3] gravity vector"), BetterLuaEditor._locFile.Get("Field_GetGravityForAltitude_Functionality", "Returns gravity vector for an altitude. gravity.y is the component of interest."));
      this.Function("GetTime()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetTime_Outputs", "[float] the time in seconds."), BetterLuaEditor._locFile.Get("Field_GetTime_Functionality", "Returns time with an arbitrary offset (i.e. the time will seldom be 0)."));
      this.Function("GetTimeSinceSpawn()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetTimeSinceSpawn_Outputs", "[float] the time in seconds since the construct spawned."), BetterLuaEditor._locFile.Get("Field_GetTimeSinceSpawn_Functionality", "Returns time since construct spawned in seconds."));
      this.Function("GetGameTime()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetGameTime_Outputs", "[float] The time since the Instance started in seconds."), BetterLuaEditor._locFile.Get("Field_GetGameTime_Functionality", "Returns time since the instance started in seconds.."));
      this.Function("GetWindDirectionAndMagnitude()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetWindDirectionAndMagnitude_Outputs", "[Vector3] Vector representing the direction and the magnitude of the wind."), BetterLuaEditor._locFile.Get("Field_GetWindDirectionAndMagnitude_Functionality", "Get the direction and magnitude of the current wind."));
    }

    public void GuiSelfAware()
    {
      this.Function("GetConstructPosition()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructPosition_Outputs", "[Vector3] The position (Vector3 has members x, y, and z)."), BetterLuaEditor._locFile.Get("Field_GetConstructPosition_Functionality", "Returns the position of the construct. The construct's position is essentially the position of the first ever block placed, or the centre of the starting raft that it was built from."));
      this.Function("GetConstructForwardVector()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructForwardVector_Outputs", "[Vector3] The forward pointing vector of the construct (it has length 1)"), BetterLuaEditor._locFile.Get("Field_GetConstructForwardVector_Functionality", "Return the forward pointing vector of the construct"));
      this.Function("GetConstructRightVector()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructRightVector_Outputs", "[Vector3] The right pointing vector of the construct (it has length 1)"), BetterLuaEditor._locFile.Get("Field_GetConstructRightVector_Functionality", "Return the right pointing vector of the construct"));
      this.Function("GetConstructUpVector()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructUpVector_Outputs", "[Vector3] The up pointing vector of the construct (it has length 1)"), BetterLuaEditor._locFile.Get("Field_GetConstructUpVector_Functionality", "Return the up pointing vector of the construct"));
      this.Function("GetConstructMaxDimensions()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructMaxDimensions_Outputs", "[Vector3] The size of the vehicle right, up and forwards of its origin"), BetterLuaEditor._locFile.Get("Field_GetConstructMaxDimensions_Functionality", "Returns the 'positive' size of the vehicle (right,up,forwards) relative to its origin (GetConstructPosition()). The coordinates are in local space. This minus GetConstructMinDimensions() provides the full size of the vehicle."));
      this.Function("GetConstructMinDimensions()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructMinDimensions_Outputs", "[Vector3] The size of the vehicle left, down and back of its origin"), BetterLuaEditor._locFile.Get("Field_GetConstructMinDimensions_Functionality", "Returns the 'negative' size of the vehicle (left,down,back) relative to its origin (GetConstructPosition()). The coordinates are in local space."));
      this.Function("GetConstructRoll()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructRoll_Outputs", "[float] The roll angle in degrees"), BetterLuaEditor._locFile.Get("Field_GetConstructRoll_Functionality", "Return the roll angle in degrees"));
      this.Function("GetConstructPitch()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructPitch_Outputs", "[float] The pitch angle in degrees"), BetterLuaEditor._locFile.Get("Field_GetConstructPitch_Functionality", "Return the pitch angle in degrees"));
      this.Function("GetConstructYaw()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructYaw_Outputs", "[float] The yaw angle in degrees"), BetterLuaEditor._locFile.Get("Field_GetConstructYaw_Functionality", "Return the yaw angle in degrees"));
      this.Function("GetConstructCenterOfMass()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructCenterOfMass_Outputs", "[Vector3] The position (Vector3 has members x, y, and z)."), BetterLuaEditor._locFile.Get("Field_GetConstructCenterOfMass_Functionality", "Returns the position of the construct's centre of mass in the world"));
      this.Function("GetConstructLocalCenterOfMass()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetConstructLocalCenterOfMass_Outputs", "[Vector3] The local position (Vector3 has members x, y, and z)."), BetterLuaEditor._locFile.Get("Field_GetConstructLocalCenterOfMass_Functionality", "Returns the position of the construct's centre of mass in the vehicle. It is typically rounded to 50cm increments to make balancing more achievable, but this can be changed in the 'V' menu."));
      this.Function("GetAiPosition(mainframeIndex)", BetterLuaEditor._locFile.Get("Field_GetAIPosition_Inputs", "mainframeindex: [int] 0 is the first mainframe."), BetterLuaEditor._locFile.Get("Field_GetAIPosition_Outputs", "[Vector3] The position (Vector3 has members x, y, and z)."), BetterLuaEditor._locFile.Get("Field_GetAIPosition_Functionality", "Returns the position of the mainframe in the world. Returns Vector3(0,0,0) if no such mainframe exists."));
      this.Function("GetVelocityMagnitude()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetVelocityMagnitude_Outputs", "[float] magnitude of your velocity in meters per second."), BetterLuaEditor._locFile.Get("Field_GetVelocityMagnitude_Functionality", "Returns the magnitude of your velocity in meters per second."));
      this.Function("GetForwardsVelocityMagnitude()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetForwardsVelocityMagnitude_Outputs", "[float] magnitude of your forwards velocity in meters per second."), BetterLuaEditor._locFile.Get("Field_GetForwardsVelocityMagnitude_Functionality", "Returns the magnitude of your velocity in the forwards direction in meters per second. A negative value means you're going predominently backwards."));
      this.Function("GetVelocityVector()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetVelocityVector_Outputs", "[Vector3] Your construct's velocity vector in meters per second"), BetterLuaEditor._locFile.Get("Field_GetVelocityVector_Functionality", "Returns your construct's velocity vector in world space in meters per second. x is east west, y is up down and z is north south.."));
      this.Function("GetVelocityVectorNormalized()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetVelocityVectorNormalized_Outputs", "[Vector3] Your construct's velocity vector in meters per second- normalized to have a length of 1."), BetterLuaEditor._locFile.Get("Field_GetVelocityVectorNormalized_Functionality", "Returns your construct's velocity vector in world space in meters per second. x is east west, y is up down and z is north south. It's normalized to have a length of 1."));
      this.Function("GetAngularVelocity()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetAngularVelocity_Outputs", "[Vector3] Your construct's angular velocity in world space"), BetterLuaEditor._locFile.Get("Field_GetAngularVelocity_Functionality", "Returns your angular velocity. x is speed of turn around the east->west axis, y is around the vertical axis and z is around the north south axis. You're probably going to want the next function instead of this one..."));
      this.Function("GetLocalAngularVelocity()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetLocalAngularVelocity_Outputs", "[Vector3] Your construct's angular velocity in local space"), BetterLuaEditor._locFile.Get("Field_GetLocalAngularVelocity_Functionality", "Returns your angular velocity. x is pitch, y yaw and z roll. "));
      this.Function("GetAmmoFraction()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetAmmoFraction_Outputs", "[float] fraction. 0 to 1. 1 if no ammo storage is available"), BetterLuaEditor._locFile.Get("Field_GetAmmoFraction_Functionality", "Returns the fraction of ammo your construct has left"));
      this.Function("GetFuelFraction()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetFuelFraction_Outputs", "[float] fraction. 0 to 1. 1 if no fuel storage is available"), BetterLuaEditor._locFile.Get("Field_GetFuelFraction_Functionality", "Returns the fraction of fuel your construct has left"));
      this.Function("GetSparesFraction()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetSparesFraction_Outputs", "[float] fraction. 0 to 1. 1 if no spares storage is available"), BetterLuaEditor._locFile.Get("Field_GetSparesFraction_Functionality", "Returns the fraction of spares your construct has left"));
      this.Function("GetEnergyFraction()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetEnergyFraction_Outputs", "[float] fraction. 0 to 1. 1 if no batteries are available"), BetterLuaEditor._locFile.Get("Field_GetEnergyFraction_Functionality", "Returns the fraction of energy your construct has left"));
      this.Function("GetPowerFraction()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetPowerFraction_Outputs", "[float] fraction. 0 to 1"), BetterLuaEditor._locFile.Get("Field_GetPowerFraction_Functionality", "Returns the fraction of power your construct has left"));
      this.Function("GetElectricPowerFraction()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetElectricPowerFraction_Outputs", "[float] fraction. 0 to 1."), BetterLuaEditor._locFile.Get("Field_GetElectricPowerFraction_Functionality", "Returns the fraction of electric power your construct has left"));
      this.Function("GetHealthFraction()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetHealthFraction_Outputs", "[float] fraction. 0 to 1. 1 if full health"), BetterLuaEditor._locFile.Get("Field_GetHealthFraction_Functionality", "Returns the fraction of health your construct has (including turrets etc)"));
      this.Function("IsDocked()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_IsDocked_Outputs", "[bool] Docked? true for yes."), BetterLuaEditor._locFile.Get("Field_IsDocked_Functionality", "Returns true if the vehicle is docked"));
      this.Function("GetHealthFractionDifference(time)", BetterLuaEditor._locFile.Get("Field_GetHealthFractionDifference_Inputs", "time[float]: the time you want the difference measured over. Time will be limited to be between 1 and 30."), BetterLuaEditor._locFile.Get("Field_GetHealthFractionDifference_Outputs", "[float] health difference as a fraction (0 to 1)"), BetterLuaEditor._locFile.Get("Field_GetHealthFractionDifference_Functionality", "Returns health difference over a specified measurement time"));
      this.Function("GetBlueprintName()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetBlueprintName_Outputs", "[string] name of the bluepritn."), BetterLuaEditor._locFile.Get("Field_GetBlueprintName_Functionality", "Returns the the name of this blueprint."));
      this.Function("GetUniqueId()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetUniqueID_Outputs", "[int] the unique id."), BetterLuaEditor._locFile.Get("Field_GetUniqueID_Functionality", "Returns the the unique id of this construct. No other construct has the same id."));
    }

    private void GuiBasics()
    {
      this.SimpleText(BetterLuaEditor._locFile.Get("String_AFunctionCalledUpdate", "The basic code file needs a function called Update that takes an input called I. It should look like this-"));
      this.CodeSnippet("function Update(I)\n-- put your code here \nend");
      this.SimpleText(BetterLuaEditor._locFile.Get("String_FunctionCalls", "'I' is the interface to the game and contains all the function calls you see on these help pages."));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_CodeInUpdate", "The code in Update will be executed every single physics step (the game runs at 40 physics steps per in game second of time)"));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_CreatesACommentLine", "-- creates a comment line so the line '-- put your code here' is never executed by the game. Comments are for explaining how your code functions."));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_IsASimple", "Here is a simple example of a function that uses one of the interface functions to write 'Hello' to the HUD"));
      this.CodeSnippet("function Update(I)\n I:Log('Hello') \nend");
    }

    private void GuiSyntax()
    {
      this.Heading(BetterLuaEditor._locFile.Get("Header_StringConcatenation", "String Concatenation"));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_StringConcatenationIsDone", "String Concatenation is done with ..   i.e 'Hello' .. ' Player'   creates 'Hello Player'. Numbers are automatically converted to strings."));
      this.Heading(BetterLuaEditor._locFile.Get("Header_Loops", "For loops"));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_LoopsInThis", "For loops (in this example looping from 0 to 10 in increments of 1) use:"));
      this.CodeSnippet("for ii=0,10,1 do\n -- your code here (note that we don't need to define the step size of 1.. 1 is the default anyway)\n end");
      this.Heading(BetterLuaEditor._locFile.Get("Header_CallingFunctions", "Calling functions"));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_IsUsed", "The colon (:) is used for calling functions. This is why all calls to the interface start with I:  (i.e. I:RequestWaterForwards(5))"));
      this.Heading(BetterLuaEditor._locFile.Get("Header_Comments", "Comments"));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_CreatesAComment", "-- creates a comment. So this line, in LUA, would be a comment"));
      this.Heading(BetterLuaEditor._locFile.Get("Header_GlobalVariables", "Global variables"));
      this.SimpleText("Declare a variable outside of your Update function and it will be persistent from call to call, the example below will log the counter to the Log forever (1,2,3,4,5,etc).");
      this.CodeSnippet("count = 0 ;\nfunction MyUpdateFunction()\ncount = count + 1 ;\nI:Log(count);\n end");
      this.Heading(BetterLuaEditor._locFile.Get("Header_Statements", "If Statements"));
      this.SimpleText(BetterLuaEditor._locFile.Get("String_AIsGreater", "To conditionally execute some code you can use an if statement. In this example we only execute the line if 'a' is greater than 0.:"));
      this.CodeSnippet("if a>0 then\n-- your code here\nend");
    }

    private void GuiPropulsion()
    {
      this.Function("TellAiThatWeAreTakingControl()", "", "", BetterLuaEditor._locFile.Get("Field_TellAIThatWeAreTakingControl_Functionality", "Will stop the AI from issuing propulsion commands for the next second, after which it will assume control again. This is exactly what happens when the player presses a control key on an AI controlled vehicle."));
      this.Function("AddPropulsionRequest(type, drive)", BetterLuaEditor._locFile.Get("Field_AddPropulsionRequest_Inputs", "type: Main = 0, Secondary = 1, Tertiary = 2 , Roll = 3, Pitch = 4, Yaw = 5, Forwards = 6, Up = 7, Right = 8, A = 9, B = 10, C = 11, D = 12, E = 13]\ndrive: [float] the amount to add to the axis"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_AddPropulsionRequest_Functionality", "Adds a propulsion request to the specified axis. This is additive to any other requests made to the axis in the same frame and is clamped between -1 and 1"));
      this.Function("SetPropulsionRequest(type, drive)", BetterLuaEditor._locFile.Get("Field_SetPropulsionRequest_Inputs", "type: Main = 0, Secondary = 1, Tertiary = 2 , Roll = 3, Pitch = 4, Yaw = 5, Forwards = 6, Up = 7, Right = 8, A = 9, B = 10, C = 11, D = 12, E = 13]\ndrive: [float] the amount the axis is set to"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_SetPropulsionRequest_Functionality", "Sets the propulsion request to the specified axis. This overwrites any other requests made to the axis in the same frame and is clamped between -1 and 1"));
      this.Function("GetPropulsionRequest(type)", BetterLuaEditor._locFile.Get("Field_GetPropulsionRequest_Inputs", "type: Main = 0, Secondary = 1, Tertiary = 2 , Roll = 3, Pitch = 4, Yaw = 5, Forwards = 6, Up = 7, Right = 8, A = 9, B = 10, C = 11, D = 12, E = 13]"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetPropulsionRequest_Functionality", "Gets the sum of all requests made to the specified axis in the previous frame or reads the value that the drive is set to if the type is Main, Secondary or Tertiary"));
      this.Function("RequestComplexControllerStimulus(stim)", BetterLuaEditor._locFile.Get("Field_RequestComplexControllerStimulus_Inputs", "stim: none = 0,T =1,G =2 ,Y =3,H =4,U =5,J =6,I =7,K =8,O= 9,L =10,up=11,down=12,left=13,right=14"), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_RequestComplexControllerStimulus_Functionality", "Requests a stimuli as per the complex controller block."));
      this.Function("MoveFortress", BetterLuaEditor._locFile.Get("Field_MoveFortress_Inputs", "direction [Vector3]:  Direction to move the fortress in.  Limited to 1 meter."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_MoveFortress_Functionality", "Move fortress in any direction.  Limited to 1 meter."));
      this.Function("RequestCustomAxis(axisName,drive)", BetterLuaEditor._locFile.Get("RequestCustomAxis", "axisName [string]: name of axis to create/use. Limited to 32 characters.\ndrive [float]: value to add to the axis on this frame."), BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("RequestCustomAxis_Functionality", "Creates or uses an axis with a custom name. Adds a value to the axis. Axes values are limited to between -1 and 1. Axes names are limited to 32 characters."));
      this.Function("GetCustomAxis(axisName)", BetterLuaEditor._locFile.Get("Field_GetCustomAxis_Inputs", "axisName [string]: name of axis to get value for."), BetterLuaEditor._locFile.Get("Field_GetCustomAxis_Outputs", "The value of the axis as a float. 0 if axis not created yet."), BetterLuaEditor._locFile.Get("Field_RequestCustomAxis_Functionality", "Returns the value of the named axis that it had the previous frame, or 0 if axis not created yet."));
    }

    private void AI()
    {
      this.Function("GetAIMovementMode(index)", BetterLuaEditor._locFile.Get("Field_GetAIMovementMode_Inputs", "index: [int] index of the AI mainframe"), BetterLuaEditor._locFile.Get("Field_GetAIMovementMode_Outputs", "[string] movement mode of the AI mainframe. Possible modes: Off, Manual, Automatic, Fleet"), BetterLuaEditor._locFile.Get("Field_GetAIMovementMode_Functionality", "returns the movement mode of the AI mainframe specified by the index"));
      this.Function("GetAIFiringMode(index)", BetterLuaEditor._locFile.Get("Field_GetAIFiringMode_Inputs", "index: [int] index of the AI mainframe"), BetterLuaEditor._locFile.Get("Field_GetAIFiringMode_Outputs", "[string] firing mode of the AI mainframe. Possible modes: Off, On"), BetterLuaEditor._locFile.Get("Field_GetAIFiringMode_Functionality", "returns the firing mode of the AI mainframe specified by the index"));
      this.Field("AIMode - Obsolete, please use 'GetAIMovementMode' instead", BetterLuaEditor._locFile.Get("Field_AIMode_Outputs", "[string] Returns the mode of the AI.  Possible modes: off, on"), BetterLuaEditor._locFile.Get("Field_AIMode_Functionality", "Returns the mode of the AI mainframe."), true);
      this.Field("ConstructType - obsolete", BetterLuaEditor._locFile.Get("Field_ConstructType_Outputs", "[string] The type of construct."), BetterLuaEditor._locFile.Get("Field_ConstructType_Functionality", "AI's concept of what type of craft this ship is. Possible types: none"), false);
    }

    private void GuiTargets()
    {
      this.Function("GetNumberOfMainframes()", BetterLuaEditor._locFile.Get("NA", "N/A"), BetterLuaEditor._locFile.Get("Field_GetNumberOfMainframes_Outputs", "The number of mainframes on your vehicle."), BetterLuaEditor._locFile.Get("Field_GetNumberOfMainframes_Functionality", "The mainframe count of your vehicle is useful for requesting targets"));
      this.Function("GetNumberOfTargets(mainframeIndex)", BetterLuaEditor._locFile.Get("Field_GetNumberOfTargets_Inputs", "mainframeIndex: 0 being the first mainframe. Use GetNumberOfMainframes() to find out how many there are."), BetterLuaEditor._locFile.Get("Field_GetNumberOfTargets_Outputs", "The number of targets in this particular mainframe. Returns 0 if such a mainframe does not exist."), BetterLuaEditor._locFile.Get("Field_GetNumberOfTargets_Functionality", "The target count is important when calling GetTarget(mainframeIndex, targetIndex)."));
      this.Function("GetTargetInfo(mainframeIndex, targetIndex)", BetterLuaEditor._locFile.Get("Field_GetTargetInfo_Inputs", "mainframeIndex: 0 being the first mainframe. Use GetNumberOfMainframes() to find out how many there are.\ntargetIndex: 0 being the first target. If target prioritisation card is in use 0 is the highest priority target."), BetterLuaEditor._locFile.Get("Field_GetTargetInfo_Outputs", "A TargetInfo object"), BetterLuaEditor._locFile.Get("Field_GetTargetInfo_Functionality", "The TargetInfo object contains many interesting variables relating to the target. Valid will be false if the target has died but the AI has not yet cleared it."));
      this.Structure("TargetInfo", BetterLuaEditor._locFile.Get("Field_TargetInfo_Valid", "Valid: [bool] true if a target was correctly returned"), BetterLuaEditor._locFile.Get("Field_TargetInfo_Priority", "Priority: [int] 0 is highest priority"), BetterLuaEditor._locFile.Get("Field_TargetInfo_Score", "Score: [float] high is a good score- taken from target prioritisation card"), BetterLuaEditor._locFile.Get("Field_TargetInfo_AimPointPosition", "AimPointPosition: [Vector3] position in game world of aim point (this is the current position of the block that's being aimed for)"), BetterLuaEditor._locFile.Get("Field_TargetInfo_Team", "Team: [int] team of target"), BetterLuaEditor._locFile.Get("Field_TargetInfo_Protected", "Protected: [bool] is it salvage? Will be false for salvage."), BetterLuaEditor._locFile.Get("Field_TargetInfo_Position", "Position: [Vector3] position in game world of target object."), BetterLuaEditor._locFile.Get("Field_TargetInfo_Velocity", "Velocity: [Vector3] velocity in game world in meters per second"), BetterLuaEditor._locFile.Get("Field_TargetInfo_playerTargetChoice", "PlayerTargetChoice: [bool] has the player set this as the target?"), BetterLuaEditor._locFile.Get("Field_TargetInfo_ID", "Id: [int] the unique integer Id of the target."));
      this.Function("GetTargetPositionInfo(mainframeIndex, targetIndex)", BetterLuaEditor._locFile.Get("Field_GetTargetPositionInfo_Inputs", "mainframeIndex: 0 being the first mainframe. Use GetNumberOfMainframes() to find out how many there are.\ntargetIndex: 0 being the first target. If target prioritisation card is in use 0 is the highest priority target."), BetterLuaEditor._locFile.Get("Field_GetTargetPositionInfo_Outputs", "A TargetPositionInfo object"), BetterLuaEditor._locFile.Get("Field_GetTargetPositionInfo_Functionality", "The TargetPositionInfo object contains many interesting variables relating to the target. Valid will be false if the target has died but the AI has not yet cleared it."));
      this.Function("GetTargetPositionInfoForPosition(mainframeIndex, x,y,z)", BetterLuaEditor._locFile.Get("Field_GetTargetPositionInfoForPosition_Inputs", "mainframeIndex: [int] 0 being the first mainframe. Use GetNumberOfMainframes() to find out how many there are.\nx: [float] east west in meters.\ny: [float] up down in meters (0 is sea level).\nz: north south in meters."), BetterLuaEditor._locFile.Get("Field_GetTargetPositionInfoForPosition_Outputs", "A TargetPositionInfo object for this point in space. Velocity will be 0."), BetterLuaEditor._locFile.Get("Field_GetTargetPositionInfoForPosition_Functionality", "The TargetPositionInfo object contains many interesting variables relating to the target."));
      this.Structure("TargetPositionInfo", BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_Valid", "Valid: [bool] true if target position info correctly returned."), BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_Azimuth", "Azimuth: [float] degrees off nose of our vehicle where positive is clockwise"), BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_Elevation", "Elevation: [float] degrees off nose of our vehicle where positive is downwards. This often has dodgy values"), BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_ElevationForAltitudeComponentOnly", "ElevationForAltitudeComponentOnly: [float] the elevation off nose of the target's altitude. Robustly calculated"), BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_Range", "Range: [float] the range to the target"), BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_Direction", "Direction: [Vector3] the direction to the target (absolute, not normalised)"), BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_GroundDistance", "GroundDistance: [float] the distance along the ground (ignoring vertical component) to the target"), BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_AltitudeAboveSeaLevel", "AltitudeAboveSeaLevel: [float] in metres."), BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_Position", "Position: [Vector3] position of target"), BetterLuaEditor._locFile.Get("Field_TargetPositionInfo_Velocity", "Velocity: [Vector3] meters per second"));
    }

    private void Function(string name, string inputs, string outputs, string functionality)
    {
      GUILayout.BeginVertical(this._s.STYLE_FunctionBox);
      if (GUILayout.Button(new GUIContent("<color=cyan>I:</color>" + name, name), this._s.STYLE_FunctionName))
      {
        GUISoundManager.GetSingleton().PlayBeep();
        TextEditor textEditor = new TextEditor();
        textEditor.text = "I:" + name;
        textEditor.SelectAll();
        textEditor.Copy();
      }
      if (GUI.tooltip == name)
        TipDisplayer.Instance.SetTip((IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Tip_ClickToCopyFunction", "Click to copy the function call to your clipboard")));
      GUILayout.Label("<color=cyan>Inputs:</color> " + inputs, this._s.STYLE_InsOuts);
      GUILayout.Label("<color=cyan>Outputs:</color> " + outputs, this._s.STYLE_InsOuts);
      GUILayout.Label(functionality, this._s.STYLE_Functionality);
      GUILayout.EndVertical();
    }

    private void Field(string name, string outputs, string functionality, bool readOnly)
    {
      GUILayout.BeginVertical(this._s.STYLE_FunctionBox);
      if (GUILayout.Button(new GUIContent("<color=cyan>I.</color>" + name + (readOnly ? " (read only)" : ""), name), this._s.STYLE_FunctionName))
      {
        GUISoundManager.GetSingleton().PlayBeep();
        TextEditor textEditor = new TextEditor();
        textEditor.text = "I." + name;
        textEditor.SelectAll();
        textEditor.Copy();
      }
      if (GUI.tooltip == name)
        TipDisplayer.Instance.SetTip((IToolTip) new ToolTip(BetterLuaEditor._locFile.Get("Tip_ClickToCopyReference", "Click to copy the field reference to your clipboard")));
      GUILayout.Label("<color=cyan>Outputs:</color> " + outputs, this._s.STYLE_InsOuts);
      GUILayout.Label(functionality, this._s.STYLE_Functionality);
      GUILayout.EndVertical();
    }

    private void Structure(string name, params string[] members)
    {
      GUILayout.BeginVertical(this._s.STYLE_FunctionBox);
      GUILayout.Label(name, this._s.STYLE_FunctionName);
      foreach (string member in members)
        GUILayout.Label(member, this._s.STYLE_InsOuts);
      GUILayout.EndVertical();
    }

    private void SimpleText(string text) => GUILayout.Label(text, this._s.STYLE_SimpleText);

    private void Heading(string text) => GUILayout.Label(text, this._s.STYLE_Heading);

    private void CodeSnippet(string code) => GUILayout.TextArea(code, this._s.STYLE_CodeSnippet);

    public override void OnActivateGui() => this._text = this._focus.GetText();

    public enum LuaHelpTabs
    {
      Basics,
      Syntax,
      Logging,
      Propulsion,
      Targets,
      Misc,
      SelfAwareness,
      Components,
      Weapons,
      MissileWarning,
      MissileGuidance,
      Maths,
      Libraries,
      Spinners,
      Friendlies,
      Fleet,
      Resources,
      AI,
      SubConstructs,
    }
  }
}
